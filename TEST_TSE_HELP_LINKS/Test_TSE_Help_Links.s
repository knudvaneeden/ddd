/*
  Tool            Test_TSE_Help_Links
  Author          Carlo Hogeveen
  Website         eCarlo.nl/tse
  Compatibility   Windows TSE 4.0 upwards; tests OK with Linux TSE 4.42.
  Version         v1.0.1   9 Mar 2022

  This tool tests for logical errors in the links in the hidden raw Help file
  as generated by Hlp2txt v3.

  Note: Such raw Help files have differences in the generated indeces
        (the letter index and the standard index), depending on
        whether HTML or plain text was generated.


  USAGE

    Run Hlp2txt v3 upwards.
    Make its hidden raw Help buffer the current buffer.
    Execute this Test_TSE_Help_Links macro.


  TERMINOLOGY

    I use the terms "linked to" and "addressed" interchangeably.


  ERRORS: This tool tests the raw Help for the following errors:
  - Duplicate main topics.
  - Duplicate subtopics within a topic.
  - Links that point to a non-existing address.
  - Topics that are not addressed at all, i.e. their subtopics are not
    addressed either.

  WARNINGS: It tests for the following warnings:
  - Main topics for which only their subtopics are addressed.

  NOTES: It tests for the following notes:
  - Subtopics that are not addressed.


  KNOWLEDGE

  In creating this tool I learned the following about TSE's Help's
  subtopics (the numbers being for TSE Pro v4.42):
  - Subtopics can be addressed using a single-part "global" address,
    or a dual-part "local" address.
    A local address specifies a subtopic in a specific topic.
  - A subtopic's implicit global address can in practice not be used for three
    reasons:
    - There are no links to the address at all (200).
    - Links already use the global address for a same-named topic (134).
    - Links already use the global address for an earlier same-named subtopic
      (3).
  - TSE's Help has:
      859 subtopics: 522 are addressed, 337 are not.
      360 subtopics are adressed globally.
      176 subtopics are adressed locally.
       14 subtopics are adressed both ways.


  HISTORY

  v1      4 Mar 2022
    Initial release.

  v1.0.1  9 Mar 2020
    A closing topic quote was missing in three report lines.
    Improved the above documentation a bit.

*/

string LINK_MIDDLE_DUAL_PART   [2] = '}¯'
string LINK_MIDDLE_DUAL_PART_X [3] = '\}¯'     // Regular expression variant
string LINK_START_INFOBOX      [4] = '®LI¯'
string LINK_START_DUAL_PART    [4] = '®L {'
string LINK_START_DUAL_PART_X  [5] = '®L \{'   // Regular expression variant
string LINK_START_WYSIWYG      [3] = '®L¯'
string LINK_STOP               [4] = '®/L¯'
string SUBTOPIC_START          [3] = '®S¯'
string SUBTOPIC_STOP           [4] = '®/S¯'
string TOPIC_START             [3] = '®T¯'
string TOPIC_STOP              [4] = '®/T¯'

/*
  In Windows KeyPressed() is often used to keep a long running macro focussed.
  In Linux that is not necessary and even harmful, because there KeyPressed()
  waits too long for a key and slows a macro down too much.
*/
integer proc key_pressed()
  #ifdef LINUX
    return(FALSE)
  #else
    return(KeyPressed())
  #endif
end key_pressed

string proc get_found_text(integer tag_nr)
  string found_text [MAXSTRINGLEN] = ''
  MarkFoundText(tag_nr)
  found_text = GetMarkedText()
  UnMarkBlock()
  return(found_text)
end get_found_text

proc report_duplicate_main_topics(    integer help_id,
                                      integer report_id,
                                  var integer errors)
  string  main_topic  [255] = ''
  key_pressed()
  Message('Searching for duplicate main topics ...')
  key_pressed()
  GotoBufferId(help_id)
  BegFile()
  while lFind(TOPIC_START + '{.*}' + TOPIC_STOP, 'ix+')
    main_topic = get_found_text(1)
    PushLocation()
    if lFind(TOPIC_START + main_topic + TOPIC_STOP, 'ix+')
      AddLine('Error: Main topic "' + main_topic + '" occurs multiple times.',
              report_id)
      errors = errors + 1
      PopLocation()
    else
      KillLocation()
    endif
  endwhile
end report_duplicate_main_topics

proc report_duplicate_subtopic_in_topic(    integer help_id,
                                            integer report_id,
                                        var integer errors)
  string  main_topic_1 [MAXSTRINGLEN] = ''
  string  main_topic_2 [MAXSTRINGLEN] = ''
  string  sub_topic    [MAXSTRINGLEN] = ''
  key_pressed()
  Message('Searching for duplicate subtopics in topics ...')
  key_pressed()
  GotoBufferId(help_id)
  BegFile()
  while lFind(SUBTOPIC_START + '{.*}' + SUBTOPIC_STOP, 'ix+')
    sub_topic = get_found_text(1)
    PushLocation()
    PrevChar()
    if lFind(TOPIC_START + '{.*}' + TOPIC_STOP, 'bx')
      main_topic_1 = get_found_text(1)
      PopLocation()
      if lFind(SUBTOPIC_START + sub_topic + SUBTOPIC_STOP, 'ix+')
        PrevChar()
        if lFind(TOPIC_START + '{.*}' + TOPIC_STOP, 'bx')
          main_topic_2 = get_found_text(1)
          if EquiStr(main_topic_1, main_topic_2)
            AddLine('Error: Subtopic "' + sub_topic +
                    '" occurs twice in main topic "' + main_topic_1 + '".',
                    report_id)
            errors = errors + 1
          endif
        endif
        PopLocation()
      else
        KillPosition()
      endif
    else
      AddLine('Error: Subtopic "' + sub_topic + '" at line ' + Str(CurrLine())
              + ' has no topic.',
              report_id)
      errors = errors + 1
      KillLocation()
    endif
  endwhile
end report_duplicate_subtopic_in_topic

/*
proc report_problematic_wysiwyg_links(    integer help_id,
                                          integer report_id,
                                      var integer errors)
  string  address [MAXSTRINGLEN] = ''
  integer main_topics            = 0
  integer sub_topics             = 0
  GotoBufferId(help_id)
  BegFile()
  while lFind(LINK_START_WYSIWYG + '{.*}' + LINK_STOP, 'ix+')
    address     = get_found_text(1)
    main_topics = 0
    sub_topics  = 0
    PushLocation()
    BegFile()
    while lFind(TOPIC_START + address + TOPIC_STOP, 'i+')
      main_topics = main_topics + 1
    endwhile
    BegFile()
    while lFind(SUBTOPIC_START + address + SUBTOPIC_STOP, 'i+')
      sub_topics = sub_topics + 1
    endwhile
    PopLocation()

    // Both these conditions turn out to be common and are apparently valid.
    //  if (main_topics == 0 and sub_topics > 0)
    //  or (main_topics + sub_topics >= 2)
    //    AddLine('WYSIWYG link to "' + address + '" addresses ' + Str(main_topics)
    //            + ' topics and ' + Str(sub_topics) + ' subtopics.', report_id)
    //    errors = errors + 1
    //  endif

    if main_topics + sub_topics == 0
      AddLine('WYSIWYG link to "' + address + '" has no topics or subtopics.',
              report_id)
      errors = errors + 1
    endif

    key_pressed()
    Message('Searching for problematic WYSIWYG links ...   ',
            CurrLine() * 100 / NumLines(); '%')
    key_pressed()
  endwhile
end report_problematic_wysiwyg_links
*/

proc gather_link_addresses(integer help_id, integer link_addresses_id)
  string  address [MAXSTRINGLEN] = ''

  GotoBufferId(help_id)

  key_pressed()
  Message('Gather WYSIWYG links ...')
  key_pressed()
  BegFile()
  while lFind(LINK_START_WYSIWYG + '{.*}' + LINK_STOP, 'ix+')
    address = get_found_text(1)
    AddLine(address, link_addresses_id)
  endwhile

  key_pressed()
  Message('Gather InfoBox links ...')
  key_pressed()
  BegFile()
  while lFind(LINK_START_INFOBOX + '{.*}' + LINK_STOP, 'ix+')
    address = 'Info->' + get_found_text(1)
    AddLine(address, link_addresses_id)
  endwhile

  key_pressed()
  Message('Gather dual-part links ...')
  key_pressed()
  BegFile()
  while lFind(LINK_START_DUAL_PART_X + '{.*}' + LINK_MIDDLE_DUAL_PART_X
              + '.*' + LINK_STOP, 'ix+')
    address = get_found_text(1)
    AddLine(address, link_addresses_id)
  endwhile
end gather_link_addresses

proc report_pointless_links(    integer link_addresses_id,
                                integer help_id,
                                integer report_id,
                            var integer errors)
  string  address [MAXSTRINGLEN] = ''
  integer topic_line             = 0

  GotoBufferId(link_addresses_id)
  if NumLines()
    MarkLine(1, NumLines())
    Sort(_IGNORE_CASE_)
    UnMarkBlock()
    BegFile()
    repeat
      address = GetText(1, MAXSTRINGLEN)
      if not Pos(';', address)
        GotoBufferId(help_id)
        if  not lFind(TOPIC_START    + address + TOPIC_STOP   , 'gi')
        and not lFind(SUBTOPIC_START + address + SUBTOPIC_STOP, 'gi')
          AddLine('Error: Link address "' + address
                  + '" has no corresponding (sub)topic address.', report_id)
          errors = errors + 1
        endif
        GotoBufferId(link_addresses_id)
      endif
      key_pressed()
      Message('Examining single-part link addresses ...';
              CurrLine() * 100 / NumLines(); '%')
      key_pressed()
    until not Down()

    BegFile()
    repeat
      address = GetText(1, MAXSTRINGLEN)
      if Pos(';', address)
        GotoBufferId(help_id)
        if lFind(TOPIC_START + GetToken(address, ';', 1) + TOPIC_STOP, 'gi')
          topic_line = CurrLine()
          if not lFind(TOPIC_START + '.*' + TOPIC_STOP, 'ix+')
            EndFile()
          endif
          if not lFind(SUBTOPIC_START + GetToken(address, ';', 2)
                       + SUBTOPIC_STOP, 'bi')
          or     CurrLine() < topic_line
            AddLine('Error: Link address "' + address
                    + '" has no corresponding subtopic in topic address.',
                    report_id)
            errors = errors + 1
          endif
        endif
        GotoBufferId(link_addresses_id)
      endif
      key_pressed()
      Message('Examining dual-part link addresses ...';
              CurrLine() * 100 / NumLines(); '%')
      key_pressed()
    until not Down()
  endif
end report_pointless_links

proc report_not_addressed_topics(    integer link_addresses_id,
                                     integer help_id,
                                     integer report_id,
                                 var integer errors,
                                 var integer warnings)
  string main_topic  [255] = ''

  key_pressed()
  Message('Searching for not-addressed main topics ...')
  key_pressed()

  GotoBufferId(help_id)
  BegFile()
  while lFind(TOPIC_START + '{.*}' + TOPIC_STOP, 'ix+')
    main_topic = get_found_text(1)

    GotoBufferId(link_addresses_id)
    if not lFind(main_topic, '^gi$')
      if lFind(main_topic + ';', '^gi')
        AddLine('Warning: Main topic "' + main_topic
                + '" is not addressed, but has an addressed subtopic.',
                report_id)
        warnings = warnings + 1
      else
        AddLine('Error: Main topic "' + main_topic
                + '" is not addressed, and has no addressed subtopic.',
                report_id)
        errors = errors + 1
      endif
    endif

    GotoBufferId(help_id)
  endwhile
end report_not_addressed_topics

/*
  The (1), (2) and (3) suffices that this proc logs should be meaningless.
  They were base on the assumption that a global link could also address a
  subtopic. The globally/locally counters prove that they do not.
  However, this is empirical proof: It is unknown whether this is enforced
  by TSE or just a convention by Semware's people.
  Therefore I have not removed my apparently wrong assumption from the code
  yet, and still report my old assumption as a small (1), (2), and (3)
  difference.
*/
proc report_not_addressed_subtopics(    integer link_addresses_id,
                                        integer help_id,
                                        integer report_id,
                                    var integer notes)
  integer addressed_subtopics_id              = 0
  integer has_same_named_main_topic           = FALSE
  string  main_topic           [MAXSTRINGLEN] = ''
  integer old_NumLines                        = 0
  string  report_line          [MAXSTRINGLEN] = ''
  integer subtopics                           = 0
  integer subtopics_addressed                 = 0
  integer subtopics_addressed_both_ways       = 0
  integer subtopics_addressed_globally        = 0
  integer subtopics_addressed_locally         = 0
  integer subtopic_globals_not_used           = 0
  integer subtopic_globals_to_other_subtopic  = 0
  integer subtopic_globals_to_topic           = 0
  integer subtopic_is_globally_addressed      = FALSE
  integer subtopic_is_locally_addressed       = FALSE
  string  sub_topic            [MAXSTRINGLEN] = ''

  key_pressed()
  Message('Searching for not-addressed subtopics ...')
  key_pressed()

  addressed_subtopics_id = CreateTempBuffer()

  GotoBufferId(report_id)
  old_NumLines = NumLines()
  PushLocation()

  GotoBufferId(help_id)
  BegFile()
  while lFind(SUBTOPIC_START + '{.*}' + SUBTOPIC_STOP, 'ix+')
    sub_topic = get_found_text(1)
    subtopics = subtopics + 1

    PushLocation()
    if lFind(TOPIC_START + '{.*}' + TOPIC_STOP, 'bix')
      main_topic = get_found_text(1)
    else
      main_topic = ''
    endif
    has_same_named_main_topic = lFind(TOPIC_START + sub_topic + TOPIC_STOP,
                                      'gix')
    PopLocation()

    GotoBufferId(link_addresses_id)
    subtopic_is_locally_addressed  = FALSE
    subtopic_is_globally_addressed = FALSE

    // Is the subtopic addressed by a dual-part "local" address?
    if lFind(main_topic + ';' + sub_topic, '^gi$')
      subtopic_is_locally_addressed = TRUE
      subtopics_addressed_locally   = subtopics_addressed_locally + 1
    endif

    // Is the subtopic addressed by a single-part "global" address?
    if lFind(sub_topic, '^gi$')
      // Does this subtopic share its single-part address with a topic?
      if has_same_named_main_topic
        if not subtopic_is_locally_addressed
          AddLine('Note: In topic "' + main_topic + '" the subtopic "'
                  + sub_topic
                  + '" is not addressed. (Global address is used for a topic.)',
                  report_id)
          subtopic_globals_to_topic = subtopic_globals_to_topic + 1
          notes = notes + 1
        endif
      else
        GotoBufferId(addressed_subtopics_id)
        // Was this global address used before by a subtopic?
        if lFind(sub_topic, '^gi$')
          if not subtopic_is_locally_addressed
            AddLine('Note: In topic "' + main_topic + '" the subtopic "'
                    + sub_topic
                    + '" is not addressed. (Global address is used for earlier subtopic.)',
                    report_id)
            subtopic_globals_to_other_subtopic = subtopic_globals_to_other_subtopic + 1
            notes = notes + 1
          endif
        else
          // This subtopic is the first receiver of a used global address.
          subtopic_is_globally_addressed = TRUE
          subtopics_addressed_globally   = subtopics_addressed_globally + 1
          EndFile()
          AddLine(sub_topic)
        endif
        GotoBufferId(link_addresses_id)
      endif
    else
      if not subtopic_is_locally_addressed
        AddLine('Note: In topic "' + main_topic + '" the subtopic "' + sub_topic
                + '" is not addressed. (No address usage at all.)',
                report_id)
        subtopic_globals_not_used = subtopic_globals_not_used + 1
        notes = notes + 1
      endif
    endif

    if subtopic_is_globally_addressed
    or subtopic_is_locally_addressed
      subtopics_addressed = subtopics_addressed + 1
    endif
    if  subtopic_is_globally_addressed
    and subtopic_is_locally_addressed
      subtopics_addressed_both_ways = subtopics_addressed_both_ways + 1
    endif
    GotoBufferId(help_id)
  endwhile

  GotoBufferId(report_id)
  report_line = Format('Note:'; subtopics; 'subtopics:'; subtopics_addressed;
                       'are addressed,'; subtopics - subtopics_addressed;
                       'are not.')
  PopLocation()
  if  old_NumLines == 0
  and NumLines()   <> 0
    InsertLine(report_line)
  else
    AddLine(report_line)
  endif

  AddLine(Format('Note:'; subtopics_addressed_globally;
                 'subtopics are adressed globally,';
                 subtopics - subtopics_addressed_globally;
                 'are not.'))
  AddLine(Format('Note:'; subtopics_addressed_locally;
                 'subtopics are adressed locally,';
                 subtopics - subtopics_addressed_locally;
                 'are not.'))
  AddLine(Format('Note:'; subtopics_addressed_both_ways;
                 'subtopics are adressed both ways,';
                 subtopics - subtopics_addressed_both_ways;
                 'are not.'))
  AddLine(Format('Note:'; subtopic_globals_not_used;
                 'global subtopic adressess are not used at all.'))
  AddLine(Format('Note:'; subtopic_globals_to_topic;
                 'global subtopic adressess address a same-named topic instead.'))
  AddLine(Format('Note:'; subtopic_globals_to_other_subtopic;
                 'global subtopic adressess address an earlier same-named subtopic instead.'))
  notes = notes + 7
  EndFile()

  GotoBufferId(help_id)
  AbandonFile(link_addresses_id)
end report_not_addressed_subtopics

proc Main()
  integer errors            = 0
  integer help_id           = GetBufferId()
  integer link_addresses_id = 0
  integer notes             = 0
  integer report_id         = 0
  string  report_name [255] = '*TSE Help Link Errors*'
  integer warnings          = 0
  if  not (Lower(SplitPath(CurrFilename(), _EXT_ )) in '.s', '.si', '.ui')
  and lFind(LINK_MIDDLE_DUAL_PART  , 'g')
  and lFind(LINK_MIDDLE_DUAL_PART_X, 'gx')
  and lFind(LINK_START_INFOBOX      , 'g')
  and lFind(LINK_START_DUAL_PART   , 'g')
  and lFind(LINK_START_DUAL_PART_X , 'gx')
  and lFind(LINK_START_WYSIWYG      , 'g')
  and lFind(LINK_STOP               , 'g')
  and lFind(SUBTOPIC_START          , 'g')
  and lFind(SUBTOPIC_STOP           , 'g')
  and lFind(TOPIC_START             , 'g')
  and lFind(TOPIC_STOP              , 'g')
    AbandonFile(GetBufferId(report_name))
    report_id = CreateBuffer(report_name, _NORMAL_)
    if report_id
      EmptyBuffer()
      link_addresses_id = CreateTempBuffer()
      report_duplicate_main_topics(help_id, report_id, errors)
      report_duplicate_subtopic_in_topic(help_id, report_id, errors)
      gather_link_addresses(help_id, link_addresses_id)
      report_pointless_links(link_addresses_id, help_id, report_id, errors)
      report_not_addressed_topics(link_addresses_id, help_id, report_id, errors, warnings)
      report_not_addressed_subtopics(link_addresses_id, help_id, report_id, notes)
      GotoBufferId(help_id)
      BegFile()
      GotoBufferId(report_id)
      BegFile()
      AbandonFile(link_addresses_id)
      UpdateDisplay(_ALL_WINDOWS_REFRESH_)
      Message('Done')
      Warn(errors; 'errors,'; warnings; 'warnings,'; notes; 'notes.')
    else
      Warn('PROGRAMMING ERROR: could not create report_id for "'; report_name,
           '".')
    endif
  else
    Warn('ERROR: The current buffer is not a full raw Help buffer.')
  endif
  PurgeMacro(SplitPath(CurrMacroFilename(), _NAME_))
end Main

