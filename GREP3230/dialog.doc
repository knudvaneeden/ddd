
1. What Is Dialog.S?
--------------------

This project is the realization of an idea which haunted me for a very long
time. Unfortunately, I never had quite the time to do the actual programming
or I had other more pressing things in mind. Well, what is Dialog.S? The SAL
macro Dialog.S is a run time library, which implements everything that is
necessary to have CUA style dialog boxes within TSE. Moreover, there are
some additional tools and documentation, which allow you to create your own
custom dialog boxes (look for DLG222P.ZIP). If you are not a programmer
yourself or you just want to immediately see the benefits of it all, you
will find some ready to use macros enclosed within this package. These
macros implement various TSE commands and utilities as dialog boxes.



2. What's New (Version 2.2)
---------------------------

This update is the adaption of dialogs to the GUI version of TSE-Pro.
Switching characters sets (OEM -> ANSI) was actually more work than
might outwardly be visible. Dialogs is still fully compatible with the
DOS and all console versions of TSE.

-   [2.22] fixed finding the recent files buffer
-   [2.22] fixed a rather severe bug in dialog.s
-   [2.21] adaption to version 4.2 of editor
-   [2.20] adaption to version 4.0 of editor
-   [2.20] added mouse wheel support
-   [2.20] fixed drop down lists
-   [2.20] fixed OEM issues
            (dialog.s, dialogp.s, dlgsetup.s, dlgmcc.s,
            dlgopen.s, dlgfndo.s, dlgsacii.s, dlgcomp.s,
            dlgvideo.s, dlghist.s)



3. Installation
---------------

Because this bundle includes quite a few files ;-), here's a breakdown on
what the various extensions and files are used for:

        *.dlg           These files contain binary descriptions of
                        the visual appearance of the dialogs.
        *.si            These include symbolic constants, which are
                        helpful while programming. Moreover, there are
                        a couple of these files which contain pieces of
                        code shared amongst the various macros.

In short, you can ignore these files, they are only necessary to compile the
dialogs. Next there are four files which constitute the backbone of the
package, but which are not meant to be executed by the user (which means
you). They are run time libraries, e.g., they are something which is called
a DLL someplace else.

        Dialog.S        This macro implements all the basic stuff which
                        is needed to display and interact with dialogs.
                        (DialogP.S is an integral part of Dialog.S.)
        MsgBox.S        Implements various message boxes.
        InpBox.S        A simple input device (similar to Ask in SAL).

And, believe it or not, there also are some useful programs :-).

        DlgSetup.S      dialog configuration and color editor
        DlgOpen.S       open file dialog
                        (also used for SaveAs and others, the macros
                        DlgOp16D.S and DriveLst.S are part of DlgOpen.S.)
        DlgComp.S       compares files
                        (DlgCompX is the engine under the hood of DlgComp)
        DlgBuff.S       the buffer list
        DlgRcnt.S       the recent files list
        DlgFind.S       the find command
        DlgRplc.S       the replace command
        DlgFndDo.S      the find and do command
        DlgGoto.S       goto line and column pasted together
        DlgMCC.S        macro control center
                        (used to load, execute and purge macros)
        DlgAscii.S      ascii chart
        DlgVideo.S      video mode setup
                        (SetVideo.S sets the configured mode at startup)
        DlgHist.S       a utility to inspect and maintain history lists

There is also an uninstall utility which removes the dialog package from
your disk. Well, it's crude and simple. It's a batch file which tries to
delete each and every file which is and which ever has been included within
the dialog macro package. Please note, that deldlg.bat doesn't care about
any changes you might have made, e.g. make backup copies of all the files
that you did change. Finally, deldlg.bat does NOT delete the dialogs
configuration file (dialog.cfg). You have to do this manually, if you want
to get rid of all the files.

The names of a couple of files have changed over the course of time, e.g.,
it is strongly recommended that you completely un-install any previous
version of dialogs, before you try to install and run the new one. You don't
have to delete the configuration file, though.

I also included a simple install utility, since things tend to get more
complicated when dealing with different versions of a program. Thus, to
install dialogs execute the following command at the prompt:

        InstDlg

This will display InstDlg's help screen, which tells you how to use it.
InstDlg uses two command line parameters. The first one indicates for which
version of the editor you want to install the package. The second one is the
path to the directory (or folder) to which the compiled macros should be
moved. If you omit the second parameter the package is compiled only.

Now you are ready for test driving. Enter TSE loading an arbitrary file and
executed some of the dialogs. You can quit each of them pressing <Escape>.
If you have had any previous experience with some CUA style program, it
should be pretty obvious how to use these macros. If you have ever seen a
Turbo Vision program, you might note some similarities. This is not an
accident, this was done on full purpose. Why invent a new design, when you
can steal from a familiar and trusted one?

If you should like these macros, you might even want to bind some of them
into your UI. This is quite easy. Since I planned to include instructions on
how to do this within this DOC and did not want to tell you something which
I did not test myself beforehand, I ended up having a UI file which already
had everything built right into it. E.g., the only thing you have to do, is
to burn in the DLG.UI file (sc -bsomepath\DLG.UI). Do not forget to make a
backup copy of TSE, in case you want to go back to the original interface
without much effort.



4. Controls
-----------

This section shortly explains how to interact with the things you see inside
a dialog box (these things are called controls).


The Dialog Window
-----------------

You can move the dialog on-screen by dragging it along with the mouse: click
on the title bar, hold down the mouse key and move the mouse. When you
release the mouse button, the dialog will be repainted at its new position.
You can abort the process by pressing <Escape>, while you are still holding
down the mouse button. You can also close (in fact abort) the dialog by
clicking on the [x] symbol near the upper right corner of the dialog window.


Basic Navigation
----------------

A control is in either one of two states: it's active (focused) or not.
(Well, I lied, it may also be disabled. But that's not a very interesting
state, because you cannot interact with such a control at all.) While a
dialog is on-screen there always is one (and only one) control, which has
the input focus. It should be fairly easy to spot the focused control,
because it's highlighted, which means it is displayed in a "brighter" color
than the rest. This is quite an important point, since everything you type
at the keyboard will end up as input for that special control. Well, there
are a few very important exceptions. <Tab> and <Shift Tab> will move the
focus to the next or previous control. Clicking a control with the mouse,
will focus that control and sometimes immediately execute what this specific
control is supposed to do (PushButtons). And finally, there are...


Hotkeys
-------

If the title of a control includes a highlighted (bright yellow) letter, it
has a hotkey, e.g. you can activate that control directly using this letter
or the corresponding <Alt Key> combination. The latter is perhaps the more
important one, because when you're inside a control which chews up normal
input (EditControls and ListBoxes), you cannot "hotkey" out of it using a
normal key. Finally, there are three special hotkeys: <Escape>, <Enter> and
<F1>. The <Escape> key corresponds to the Cancel button and aborts the
dialog. Hitting <Enter> will activate the default button, which in many
cases is labeled Ok. When the default button doesn't have the input focus,
its label is displayed in a slightly brighter color, so that you can easily
spot it. Moreover, the default button can also have an additional hotkey (in
the case of the Ok button this is <K> or <Alt K>). The <F1> key, as usual,
will pop up some help screen, but only when a Help button is present (the
dialog boxes in this package all feature such a button).


Text and Frames
---------------

The most simple case of a control is plain text. This serves either as
additional information or as a label for another control, e.g., you can
activate (focus) that control using the hotkey of the label. A frame is
quite similar to plain text, except that it also paints a frame around some
other controls. A text control (or frame) can never have the input focus.


PushButtons
-----------

These are also quite simple. PushButtons execute some action: abort the
dialog, open an additional dialog box, or execute the action the dialog is
gathering information for. If a PushButton has the input focus, you can
"push it down" by pressing the <Spacebar> or <Enter>. The quickest way to
execute a PushButton is either using its hotkey or clicking it with the
mouse.


CheckBoxes and RadioButtons
---------------------------

These are switches. CheckBoxes can be either on or off (marked or empty).
They are usually grouped together, but they stand for options which are
independent of each other. If a CheckBox has the input focus, you can toggle
it using the <SpaceBar>. Again using the hotkey or clicking the box with the
mouse is the fastest way to toggle it. RadioButtons stand for a "only one of
many" choices, e.g., only one of a group of RadioButtons can be marked. If
the marked button has the focus, you can move the mark with the cursor keys.


EditControls
------------

An EditControl is a field, where you can enter and edit text. If the text
doesn't fit the boundaries of the field, it will scroll automatically.
EditControls give you full access to the TSE clipboard and allow CUA style
shift marking. All the usual editing keys are operational inside an
EditControl. Here is a short description of the more unusual ones:

    <Shift CursorKey>       move cursor and mark text
    <Ctrl Home>             delete to beginning of line
    <Ctrl End>              delete to end of line
    <Ctrl BackSpace>        delete word left of cursor
    <Ctrl Del>              delete word right of cursor
    <Alt Backspace>         undo last deletion
    <Shift Ins>,<Ctrl V>    insert clipboard (first line only)
    <Ctrl Ins>,<Ctrl C>     copy to clipboard (entire line if no block)
    <Shift Del>,<Ctrl X>    cut to clipboard (ditto)
    <CursorUp/Down>         open history list (if one does exist)
    <Alt CursorUp/Down>     close (open) history list

Speaking of history lists. If you should see a down arrow next to an
EditControl, you can click it with the mouse to open the history list.

An EditControl also fully supports the mouse. E.g. you can move the cursor
with a (left) click. If you additionally hold down the key and move the
mouse, you can mark the text within the control (it scrolls!). Finally, if
you right click an EditControl, a small menu will pop up, which gives you
access to the clipboard and delete commands.

Starting with version 2.10 of dialogs EditControls can be configured to use
the windows clipboard instead of TSE's. This options is off on default. To
enable it open scwinclp.si, go to line 17 and remove the comment slashes at
the beginning of the line. Now save the file and compile dialog.s. From now
on copying, cutting and pasting from or to EditControls will use the windows
clipboard. This will overwrite TSE's internal clipboard.


ListBoxes and ComboBoxes
------------------------

ListBoxes are scrollable lists of strings, where you can choose the entry
(string) you are interested in. They work exactly analogous to the List
command provided by SAL. They are accompanied by a vertical scroll bar and
sometimes also by a horizontal one. These are, as usual, used to scroll the
list with a mouse. Double clicking an entry within the list often executes
some default action. ComboBoxes are ListBoxes within a box :-). In their
non-active (closed) state they display only the currently chosen entry. When
they are focused, you can open them using <CursorUp/Down>. You can close
the list using <Alt CursorUp/Down>. But explicitly closing the list of a
ComboBox is not necessary, because when you switch the focus, it will close
automatically. The down arrow next to a ComboBox can be used to open the
list with the mouse.


Incremental Search
------------------

ListBoxes and DropDownLists, e.g. history lists and the lists of ComboBoxes,
feature incremental search: just type a couple of letters and the list will
automatically scroll to the corresponding entry, if there is such an entry.
To repeat the last search use <Ctrl L> or <Ctrl N>. Some lists limit this
search to the beginning of the line.



5. Dialogs
----------

This section shortly describes the ready to use dialogs included in this
package. Please don't forget that each dialog provides some on-line help in
one form or another.


Setup Dialog (DlgSetup)
-----------------------

The setup program is used to customize some of the internal parameters and
the color palette Dialog.S uses. Please read the on-line help to get more
information.


Edit Files (DlgOpen)
--------------------

This dialog allows you to open files (including new ones). It is also used
for various other file oriented commands (e.g. SaveAs, LoadMacro, etc.).
Command line switches are used, to control what the macro does:

        none    EditFile
        -s      SaveFileAs
        -i      InsertBlock
        -b      SaveBlock
        -e      ExecMacro
        -l      LoadMacro
        -k      LoadKeyMacro
        -v      SaveKeyMacro
        -t      file must exist

There are another two switches which are only available when you're running
TSE from Windows 9X/NT.

        -f      list files only (don't list folders)
        -n      list names only (don't list file date/time and file size)

The settings of these switches can still be changed when DlgOpen is already
executing using the options dialog.

Most of the aspects of DlgOpen are explained within the on-line help. Here
are some additional tips and explanations. If you don't like the list of
predefined file types, which comes with DlgOpen, you can easily change it.
Open ScOpTyp1.SI and remove and/or add lines from/to the datadef named
FileTypes (don't forget to recompile). The SaveFileAs command behaves
somewhat differently as compared to the native TSE command SaveAs. In fact,
it simply is a combination of ChangeCurrFilename and SaveFile, e.g. it
changes the name of the current file and immediately saves it using the new
name. Finally, the list of available drives is maintained by a separate
macro (DriveLst.S). This is done to avoid the delay while searching the
drives each time DlgOpen is loaded.

This version of DlgOpen is completely automated, e.g., you don't have to
care about which version of TSE or which OS you are currently using. Simply
execute DlgOpen and the macro will choose by itself which is the correct
dialog to display.


The Ring of Files (DlgBuff & DlgRcnt)
-------------------------------------

These dialogs replace the Buffer List and Recent Files commands of TSE.
Actually, there isn't much to say about them, except, perhaps, that they
allow you to open files which you cannot find within the lists. Oh yes,
there is one important point: you cannot use DlgRcnt without binding it to
the UI, because the list of recent files does exist only within the scope of
the burned in UI. Since an example says more than a thousand words, load the
file DLG.UI and search for the string 'execmacro("dlgrcnt', which will show
you how to call DlgRcnt from the UI. Moreover, it also shows you that you
can remove the function mListRecentFiles() and a couple of other things it
is referring to from the UI file, if you use DlgRnct.S. Please note, that
the function GotoRecentFileBuffer as implemented in v2.6 of TSE.UI doesn't
work for DlgRcnt. But this issue is easily fixed, c.f. DLG.UI which includes
a slightly enhanced version of GotoRecentFileBuffer.


Searching and Replacing (DlgFind & DlgRplc)
-------------------------------------------

These are the Find and Replace commands. I think, you will immediately know
how to use them: fill in the strings, click a couple of options and press
<Enter>. If you use the -v switch with DlgFind, it will work as the compress
view command.

There is one thing, though, which might not be obvious from a casual glance.
You cannot use these dialogs from within a keyboard macro without using the
Options button. The reason is, that there is absolutely no way to set the
CheckBoxes to a history independent value, because they always show the most
recent history entry when the dialog pops up and can only be used to toggle
these values. Moreover, if you want to access the options histories, you
also have to use this button. (Albeit, clicking a new set might be much
faster than searching the history. Even when using the original command it's
generally much faster to type in a couple of letters than to search a long
list of almost identical short strings.) Tip: Don't use these dialogs from a
keyboard macro at all, use backup key bindings instead. This is much faster.

These macros always display the current word, in the Search For EditControl.
If you don't like this behavior, simply remove the line which gets the
current word as a default from the Main routine in both macros. Finally, you
cannot use the + option (Find) and the # option (Replace) within these
dialogs, they are simply ignored.


Find And Do (DlgFndDo)
----------------------

This is the find and do command wrapped into a dialog box. It works the same
way as the original (find&do). Moreover, you can prefix line numbers when
you're cutting or copying to the clipboard. Again, you cannot use those find
options, which are not included as check boxes within the dialog.


Positioning the Cursor (DlgGoTo)
--------------------------------

This is GotoLine and GotoColumn in a box. If you call DlgGoTo with the -c
switch, it will highlight the Column EditControl and, in fact, work like the
GotoColumn command. Otherwise, it will be the GotoLine command. Actually,
you can always edit both input lines and change the current line and column
simultaneously.


Controlling SAL Macros (DlgMCC)
-------------------------------

This macro collects all the things you can do with SAL macros (load, execute
and purge) into one central place. To quickly start a macro, just type in
its name and press enter. You can also choose a macro from the list of
loaded macros (double click it). Press the Purge button, to purge a macro
you do not need any longer. The Load and Search buttons will pop up another
dialog, which allows you to search the disk for macros you wanted to load or
execute immediately. The list of loaded macros, actually, shows a somewhat
censored view of reality. Since DlgMCC and Dialog(P) are always loaded (and
executing) while this dialog is on-screen, they are removed from the list
before it is displayed.


Ascii Chart (DlgAscii)
----------------------

This is a small ascii chart which displays all 256 ascii characters
simultaneously. You can select characters and copy them to the clipboard or
insert them directly into your text.


Changing the Video Mode (DlgVideo)
----------------------------------

This dialog is an enhanced replacement for SemWare's video macro. It allows
you to change both TSE's current and startup video mode. The startup mode is
saved in a configuration file (video.dat) in the same folder as the editor
executable. The SetVideo macro reads this file during editor startup and
switches to the appropriate mode (it unloads itself afterwards). DlgVideo
adds SetVideo to TSE's autoload list of macros. Setting the startup mode
will not work, if you remove SetVideo from this list. Neither will it work,
if TSE's own StartupVideoMode is set to something else than AutoDetect. Use
"Options->Full Configuration->Display/Color Options->Startup Video Mode" to
change this setting.

The real power of DlgVideo comes into play only with the 32-bit versions of
TSE. In this case you can fine tune the size and placement of the editor
window to a much larger degree than is possible with the video macro and/or
TSE's built in configuration utility. The left column of input fields in
the dialog control the current video mode. Changes within these immediately
effect the editor window when you press Ok or Apply. The right column of
input fields control the startup mode. Changes to these will be stored and
will effect the size and placement of the editor next time you start it. The
width and height of the window is measured in characters and lines,
respectively. The placement is in pixels off the upper left corner of the
screen. To enable SetVideo to move and size the editor window at startup,
you must check the "Use Startup Mode" CheckBox.


The History List Utility (DlgHist)
----------------------------------

Use this is utility to inspect (and maintain) history lists. See the on-line
help for more information.


Comparing Files (DlgComp aka TseComp)
-------------------------------------

This is nothing but a newer and friendlier user interface for the old
TseComp macro. (Actually DlgCompX _is_ TseComp minus the input interface.)

TseComp can be executed directly from the DOS command line. The command line
syntax is quite simple:

        TseComp  Left-File  Right-File.

TseComp.BAT has a short help screen, which shows the above rules, if you
should ever forget them. Moreover, it tests whether the files actually
exist and tells you, if it is unable find one of them.

On default TseComp displays the files to be compared on a vertically split
screen. You can toggle to horizontally split windows using the <Tab> key.
You can move around using the cursor keys (including <PgUp>, <PgDn>, <Home>
and <End>). The 'unshifted' keys move the text in the left (or upper)
window. If you additionally press the <Ctrl> key, the right (or lower)
window is effected. If you want to move the text of both windows
simultaneously, use the <Alt> key instead. E.g., <Alt Home> will position
the highlights at the beginning of both files.

When TseComp is started, it will immediately begin comparing the two files
and stop only when it encounters mismatching lines (or the end of file
marker in one of the files). Once TseComp has stopped, you can do a couple
of things. To resume the comparison press <Enter>. If you want a 'zoomed'
view of the mismatching lines, hit the <SpaceBar> and a window will pop up,
which shows a detailed comparison of the two lines. To update one of the
lines with the other, use <Ctrl L> or <Ctrl R>. To delete one of the lines,
press <Ctrl D> and TseComp will ask you which one it should remove.

Things are a bit more complicated, when you encounter whole blocks of text
which are missing in one of the files. But TseComp helps you to find these.
Use <Alt L> and <Alt R> to scan for blocks within the (l)eft or (r)ight
file. If you hit the wrong key, you can undo the search with <Alt U>.
<Ctrl B> and <Ctrl E> can be used to move to the beginning or end of a
marked block. Furthermore, a marked block can be copied over to the other
file using <Alt C>. If things should be even more complicated, e.g., some
parts of the files are completely different, you can use <Alt F> to search
for a line from which you want to resume comparing.

Finally, you can 'blank out' a set of characters (Compare|Filter). TseComp
will completely ignore these characters. But you should be aware that
'filtering' will slow down TseComp considerably. Thus, you should not use it
unless it is absolutely necessary.



6. DLG.UI
---------

As stated earlier, I wanted to provide instructions on how to bind the
supplied dialog boxes to the UI. But when I finished testing, I had an UI
file, which already had everything built right into it. Thus, I simply
include DLG.UI into this package. There isn't much to say about it. It's the
original TSE.UI with all the changes necessary to provide for dialog boxes.
In case you are interested in details, type the following at the DOS prompt:

        tsecomp somepath\tse.ui someotherpath\dlg.ui,

and TseComp will show you the differences between the two files. There is a
second UI file (DLG30.UI) which is meant to be used for version 3.0 of the
editor. It will not work for earlier versions.



7. Performance
--------------

With a macro as complex as Dialog.S one might suspect that the performance
isn't worth mentioning. I'm glad to tell you, that this isn't the case. I
tested the whole stuff on a 386SX/16, which was the slowest machine I had
access to when writing version 1.0 of dialogs, and everything worked
reasonably fast. Using a modern machine (P5) and TSE32, which allows for
buffered screen updates, you shouldn't even notice a flicker.

On the other hand, executing dialogs from within a keyboard macro, which you
intend to repeat many times (RepeatCmd), perhaps isn't such a good idea.
Never mind, everything will work perfectly o.k., but using the original
commands (especially Find and Replace) will be quite a bit faster. Thus, if
you intend to bind the ready to use dialogs to your personal UI, you should
also include backup key bindings for the original commands (at least for
Find and Replace), which you can use when recording complex keyboard macros.
DLG.UI includes examples on how you can do this.



8. Error Messages
-----------------

Since I have moved the "painting" routines to an external macro, there is
again plenty of space inside of dialog.s to include some error messages.
Nevertheless, here's a more detailed description of what each message means,
because something is terribly amiss, if you should ever see one of them.

error code 1: out of memory

This error will be triggered when dialog.s is unable to allocate a
working buffer or cannot open a popup window. You will most probably
never see this one, because it indicates a severe shortage of virtual
memory and lots of other things will go wrong beforehand.

error code 2: no parent name provided

The calling macro didn't include its name when calling dialog.s. Since a
dialog macro doesn't work without providing its name, you will never see
this message (well, unless you don't execute dialog.s directly from the
execute macro prompt).

error code 3: invalid dialog resource

This means that a dialog macro failed to provide a usable dialog
resource. Again, this indicates a major bug within the calling dialog
macro.

error code 4: no active control found

Dialog.s found that each and every control within a dialog has been
deactivated, e.g., you will be unable to interact with that specific
dialog, so dialog.s refuses to execute it.

error code 5: cannot load module

Some additional macro needed by dialog.s to function properly could not
be loaded. There is either a severe shortage of memory (c.f. code 1) or
there are currently too many resident macros loaded into TSE's memory.

As you can see, as long as you work only with tested and (mostly) bug
free dialogs, you will never encounter these error messages. They simply
exist to protect you (and the programmers of a dialog macros) from nasty
surprises.



9. Limitations
--------------

DlgOpen uses SAL strings to store path names, e.g. the longest path it can
handle is 255 characters long. On the other hand, Windows 9X/NT allows path
names which are up to 260 characters long. This means that you MUST NOT use
path names which exceed the limit imposed by DlgOpen or the macro will fail
utterly most probably hanging TSE.

Well, I guess that in real life these aren't limits at all, since nobody
actually will use filenames _that_ long.

I hope that by now most of the glitches and rough edges of the previous
versions have been eliminated. Well, if you should find something buggy,
have a suggestion on what is missing or just want to say hello, please
contact me. My e-mail address is DieterKoessl@mnet-online.de.


10. History or What Has Been New
--------------------------------


Version 1.00
------------

As you might suspect, this was the very first version of dialogs ;-).


Version 1.10
------------

The main feature of the new version is customization. It also polishes some
rough edges and corrects a few minor bugs of the previous version. Here is a
(more or less complete) list of everything that's new or has been changed.

-   customization (DlgSetup)
-   ascii chart (DlgAscii)
-   <del> key works within history lists and most list boxes
-   separated programers stuff (look for DLG110P.ZIP)
-   corrected some minor bugs (DlgHist, Dialog)


Version 1.20
------------

This update consists of many small enhancements and fixes which are
summarized below. The one major addition is programers only. It's DE, the
dialog resource editor. (Well, programming DE helped to uncover some well
hidden bugs and inconsistencies within Dialog.S. E.g., those of you who just
want to use dialogs benefit from it by receiving a cleaner and more stable
version of the library.)

-   un-install utility (DelDlg.Bat)

-   EditControl: CUA style shift marking, full clipboard and mouse support
    (includes marking) and local pop up menu (press RightBtn)

-   DlgFndDo: NEW find and do dialog
    (enhanced and "dialoged" version of find&do)
-   DlgOpen now includes "return to current directory" button and
    supports "key listings" (decompiled keyboard macros)
-   recent list (DlgRcnt) can be accessed from within buffer list (DlgBuff)
    (see usage notes within file headers of DlgBuff.S and DlgRcnt.S)
-   find dialog (DlgFind) now fully compatible with Compress View
-   macro control center (DlgMCC) now faster and without screen flicker
-   enhanced functionality of DlgHist
    (maintain and repair persistent histories)

-   update patch for the decomp/recomp macro package
    (updates version 3.10 to 3.11 which uses dialogs)

-   added hint lines to some dialog resources
-   fixed the version checking of all dialogs
-   changed extension of include files (si)
-   corrected some bugs (DlgAscii, DlgOpen, Dialog)


Version 1.21
------------

This versions corrects some bugs and adds the capability to display context
menus to the dialog library.

-   DlgWOpen: NEW open file dialog
    (handles long file names when running in Windows 95)
-   corrected some bugs (DlgOpen, DlgRun?.SI)


Version 1.22
------------

This corrects bugs and adds a couple of new paragraphs to the
users' guide.

-   fixed bugs (Dialog, DE)


Version 1.23
------------

This fixes a couple of bugs. (Not uploaded!)

-   fixed bugs (DlgFndDo, DlgSetup, DE)


Version 2.00
------------

I decided to give the package a new major version number since this version
of dialogs was designed to work both with TSE v2.5 and v2.6. All the dialogs
have been enhanced so that they can handle long filenames. Moreover, I
included a couple of new goodies and fixed some bugs (also c.f. v1.23).

-   install utility (InstDlg.Bat)
-   DlgComp: NEW macro to "visually" compare files
-   DlgOpen: now adapts to current screen height
-   compiles both with SC and SC32
-   adaption to long filenames
-   moved "painting" routines to separate library
    (transparent for both users and programmers, e.g. there is just one
    more file which you absolutely don't have to care about)
-   removed UpdtDeCmp
    (there are some plans for new versions of DeComp and ReComp)
-   fixed bugs (DlgOpen)


Version 2.10
------------

These updates fix various bugs and idiosyncrasies. A new dialog to set
the editor's video mode is included (DlgVideo) and many of the existing
dialogs have slightly been enhanced in one way or another. (Version 2.01
didn't include a new doc file and version 2.02 wasn't uploaded.)

-   [2.10] adaption to version 3.0 of editor
-   [2.10] added additional dlg30.ui
-   [2.10] added optional use of Windows clipboard for edit controls
-   [2.10] added get marked block as default (DlgFind, DlgRplc, DlgFndDo)
-   [2.10] added "clear list" button to DlgRcnt
-   [2.02] DlgVideo: NEW enhanced macro to change TSE's video mode
-   [2.01] added new programmers stuff (c.g. program.doc)
-   [2.10] fixed truncation in EditControls (c.g. program.doc)
-   [2.10] fixed bugs (Dialog, DlgOpen, DlgBuff, DlgRcnt,
                       DlgFndDo, DlgMCC, DlgVideo, DE)
-   [2.02] fixed bugs (Dialog, DialogP, DlgOpen, DlgRcnt)
-   [2.01] fixed bugs (Dialog, DialogP, DlgSetup, DlgMCC, DlgFind, DE)



11. Copyright and Disclaimer
----------------------------

This program is thereby donated to the public domain. Use it or even alter
it as you see fit, but ENTER AT YOUR OWN RISK!

Some of the macros included in this package use internal, undocumented data
structures of TSE. E.g., these macros work with the current versions of TSE,
but there is absolutely no guarantee that they will also work with any
future version of the editor.

If you want to change any of the included dialogs or build your own custom
dialogs, read Program.DOC which comes as part of DLG222P.ZIP very carefully.
You have been warned!

