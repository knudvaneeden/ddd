// MASTER FILE: ["proj.si"]
//#pragma inhouse,chrisant

// STUBS1.SI --------------------------------------------------------------
// stubs for calling macro #2



///////////////////////////////////////////////////////////////////////////
// Constants

string pjfile[] = "PJFILE"



///////////////////////////////////////////////////////////////////////////
// Functions

integer proc EnsureSupportLoaded()
	if not isMacroLoaded(pjfile)
		if not LoadMacro(pjfile)
			Warn("Unable to load " + pjfile + ".MAC")
			return (FALSE)
		endif
	endif
	return (TRUE)
end


proc NewProject()
	ExecMacro(pjfile + " -NewProject")
end


proc CopyProject()
	ExecMacro(pjfile + " -CopyProject")
end


integer proc OpenProject(string st)
	SetGlobalStr(c_stXTALK, st)
	ExecMacro(pjfile + " -OpenProject")
	DelGlobalVar(c_stXTALK)
	return (Val(Query(MacroCmdLine)))
end


integer proc SaveProject(integer fSilent)
	ExecMacro(pjfile + " -SaveProject:" + Str(fSilent))
	return (Val(Query(MacroCmdLine)))
end


proc lCloseProject()
	ExecMacro(pjfile + " -lCloseProject")
end


proc CloseProject(integer fSilent)
	ExecMacro(pjfile + " -CloseProject:" + Str(fSilent))
end


proc DoOptionsMenu()
	ExecMacro(pjfile + " -DoOptionsMenu")
end


integer proc OpenDatabase()
	ExecMacro(pjfile + " -OpenDatabase")
	return (Val(Query(MacroCmdLine)))
end


proc GetDatabaseOptions()
	ExecMacro(pjfile + " -GetDatabaseOptions")
end


proc SetDatabaseOptions()
	ExecMacro(pjfile + " -SetDatabaseOptions")
end


proc SaveDatabase()
	ExecMacro(pjfile + " -SaveDatabase")
end


#if 0
proc AddFilesToProject()
	ExecMacro(pjfile + " -AddFilesToProject")
end
#endif


proc EditProjDir(integer fMenu)
	ExecMacro(pjfile + " -EditProjDir:" + Str(fMenu))
end


proc TimeOutMessage(integer cSeconds, string msg)
	SetGlobalStr(c_stXTALK, Str(cSeconds) + ":" + msg)
	ExecMacro(pjfile + " -TimeOutMessage")
	DelGlobalVar(c_stXTALK)
end


proc DoProjectSettings()
	ExecMacro(pjfile + " -DoProjectSettings")
end

