// MASTER FILE: ["pjfile.si"]
//#pragma inhouse,chrisant

// EDTASSOC.SI ------------------------------------------------------------
// for PJFILE macro


///////////////////////////////////////////////////////////////////////////
// Edit Associated Extensions

string c_eaeListFooter[] = " {Ins}-Add  {Del}-Remove  {Alt-E}-Edit  {Enter}-Finished  {Esc}-Cancel "
string s_eaeExt[MAXEXT]


proc Del_List()
	if CurrLineLen() and YesNo("Delete?") == 1
		KillLine()
		EndProcess(-1)
	endif
end


proc Close_List()
	if FileChanged() and YesNo("Abandon changes?") <> 1
		return()
	endif
	EndProcess(FALSE)
end


proc EditExts()
	string exts[255] = ""

	PushPosition()
	if lFind("=", "gc")
		Right()
		exts = GetText(CurrPos(), 255)
		if Ask("Associated extensions:  (separate with spaces)", exts)
			KillToEol()
			InsertText(exts)
		endif
	endif
	PopPosition()
end


proc AddAssocExt()
	string ext[MAXEXT] = s_eaeExt
	integer fInserted = FALSE

	if Ask("Enter extension:", ext)
		ext = Trim(ext)
		if Length(ext)
			if ext[1] <> "."
				ext = "." + ext
			endif

			if not lFind(ext+"=", "^gi")
				InsertLine(ext+"=")
				fInserted = TRUE
			endif

			EditExts()

			if fInserted
				EndProcess(-1)
			endif
		endif
	endif
end


keydef eaeKeys
<Ins>		AddAssocExt()
<Del>		Del_List()
<Alt e>		EditExts()
<Escape>	Close_List()
end


proc eaeDraw(integer fCursorline)
	if CurrLineLen()
		PushPosition()
		#ifdef DEBUG
		BegLine()
		Assert(lFind("=", "gc"), "what, no equals sign?")
		#endif
		BegLine()
		lFind("=", "gc")
		PutLine(Upper(GetText(1, CurrPos()-1)), 10,
				iif(fCursorline, Query(MenuSelectLtrAttr), Query(MenuTextLtrAttr)))
		PutStr(Format("[", GetText(CurrPos()+1, 255):-(Query(WindowCols)-12), "]"))
		PopPosition()
	else
		ClrEol()
	endif
end


integer s_ceae = 0
proc eaeListStartup()
	if not s_ceae
		Enable(eaeKeys)
		ListFooter(c_eaeListFooter)
	endif
	s_ceae = s_ceae + 1
end
proc eaeListCleanup()
	s_ceae = s_ceae - 1
	if not s_ceae
		Disable(eaeKeys)
	endif
end


// EditAssociatedExts()
// edit associated extensions (fGlobal==FALSE is project file, fGlobal==TRUE
// is projects database)
proc EditAssociatedExts(integer fGlobal)
	integer cid = GetBufferId()
	integer idTmp
	integer ilba
	integer fOk = FALSE
	integer id
	integer x = WhereXAbs()-1
	integer y = WhereYAbs()+1
	integer ml

	s_eaeExt = iif(not QueryEditState() and BufferType() == _NORMAL_,
			CurrExt(), "")

	if fGlobal
		if not Get_Int(iDatabaseId) and not OpenDatabase()
			return()
		endif
		id = Get_Int(iDatabaseId)
	else
		id = Get_Int(iProjectId)
		//$ review: warn and abort if no project loaded?  shouldn't even be
		// able to get here in that case.
	endif

	#ifdef DEBUG
	Assert(id, "don't tell me to use a null buffer id!")
	#endif

	idTmp = CreateTempBuffer()
	if not idTmp
		Warn(c_errTmpBuf)
		return()
	endif

	if GotoBufferId(id)
		PushBlock()
		if MarkProjectSection(c_stAssociatedExtensions)
			GotoBufferId(idTmp)
			ml = Set(MsgLevel, _NONE_)
			CopyBlock()
			Set(MsgLevel, ml)
		endif
		PopBlock()

		// add blank line at bottom
		GotoBufferId(idTmp)
		EndFile()
		AddLine()
		BegFile()
		FileChanged(FALSE)
		if Length(s_eaeExt)
			lFind(s_eaeExt+"=", "^gi")
		endif

		// edit the list
		repeat
			Hook(_LIST_STARTUP_, eaeListStartup)
			Hook(_LIST_CLEANUP_, eaeListCleanup)
			SetXY(x, y)
			HookDisplay(eaeDraw,,, Hilite)
			fOk = List("Associated Extensions (" + iif(fGlobal, "All Projects",
					SqueezePath(Get_Str(iProjectTitle), 64-24-8)) + ")", 64)
			UnHookDisplay()
			UnHook(eaeListCleanup)
			UnHook(eaeListStartup)
		until fOk >= 0

		// copy the changes to id
		GotoBufferId(idTmp)
		if fOk and FileChanged()
			PushBlock()
			GotoBufferId(id)
			if MarkProjectSection(c_stAssociatedExtensions)
				KillBlock()
			endif
			GotoBufferId(idTmp)
			EndFile()
			#ifdef DEBUG
			Assert(CurrLineLen() == 0, "last line should be blank!")
			#endif
			KillLine()
			if NumLines()
				MarkLine(1, NumLines())
				GotoBufferId(id)
				ilba = Set(InsertLineBlocksAbove, OFF)
				CopyBlock()
				Set(InsertLineBlocksAbove, ilba)
			endif
			PopBlock()
		endif
	endif

	GotoBufferId(cid)
	AbandonFile(idTmp)
end


