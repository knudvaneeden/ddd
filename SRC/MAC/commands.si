// MASTER FILE: ["proj.si"]
//#pragma inhouse,chrisant

// COMMANDS.SI ------------------------------------------------------------
// Commands for PROJ macro


///////////////////////////////////////////////////////////////////////////
// Open Header File

// TestExtensions()
// given a filename (without extension!) and a list of possible extensions
// (space-delimited), test each extension to see if matching file exists; if
// so, return that extension.  if no matching files exist, return empty
// string.
string proc TestExtensions(string stFn, string stExtList)
	string ext[MAXEXT]
	integer c
	integer i

	c = NumTokens(stExtList, " ")
	for i = 1 to c
		ext = GetToken(stExtList, " ", i)
		if ext[1] <> "."
			ext = "." + ext
		endif
		if FileExists(stFn + ext)
			return(ext)
		endif
	endfor

	return("")
end


// OpenHeader()
// open file associated with current file's extension.  original purpose was
// to open the .H file matching the current .C file.
proc OpenHeader(integer fFindWord)
	string fn[MAXPATH] = SplitPath(CurrFilename(), _DRIVE_|_NAME_)
	string ext[MAXPATH] = ""
	integer fFoundExt = FALSE
	string word[80] = GetWord(TRUE)
	integer cid

	// look in project file, then projects database, for associated extensions
	if Get_Int(iProjectId)
		PushBlock()
		cid = GotoBufferId(Get_Int(iProjectId))
		if cid
			if MarkProjectSection(c_stAssociatedExtensions)
				ext = GetProjectStr(CurrExt(), "")
			endif
			GotoBufferId(cid)
		endif
		if not Length(ext)
			if not Get_Int(iDatabaseId)
				OpenDatabase()
			endif
			cid = GotoBufferId(Get_Int(iDatabaseId))
			if cid
				if MarkProjectSection(c_stAssociatedExtensions)
					ext = GetProjectStr(CurrExt(), "")
				endif
				GotoBufferId(cid)
			endif
		endif
		if Length(ext)
			fFoundExt = TRUE
			ext = TestExtensions(fn, ext)
		endif
		PopBlock()
	endif

	// if extension not found, try defaults
	if not fFoundExt
		fFoundExt = TRUE
		case CurrExt()
			// C, C++
			when ".h", ".hpp", ".hxx"			ext = "c cpp cc cxx"
			when ".c", ".cpp", ".cc", ".cxx"	ext = "h hpp hxx"

			// Assembly, Pascal, SAL
			when ".asm", ".pas"					ext = "inc"
			when ".inc"							ext = "asm pas s"
			when ".s", ".ui"					ext = "inc si"
			when ".si"							ext = "inc ui s"

			// unknown
			otherwise
				fFoundExt = FALSE
		endcase

		if fFoundExt
			ext = TestExtensions(fn, ext)
		endif
	endif

	if fFoundExt and Length(ext)
		// extension recognized, try to load corresponding file
		if FileExists(fn+ext)
			// open file
			EditFile(QuotePath(fn+ext))

			if fFindWord
				// find word under cursor
				if Length(word)
					if lFind(word, "gw")
						Find(word, "w")
					else
						TimeOutMessage(ERROR_TIMEOUT, '"'+word+'" not found.')
					endif
				endif
			endif
		else
			NoFindFile:
			TimeOutMessage(ERROR_TIMEOUT, "Unable to find corresponding file.")
			Beep()
		endif
	else
		if fFoundExt
			goto NoFindFile
		endif

		// unrecognized extension
		TimeOutMessage(ERROR_TIMEOUT, "Extension " + CurrExt() + " not supported.")
		Beep()
	endif
end



///////////////////////////////////////////////////////////////////////////
// Open File At Cursor

/*
menu OpenWith()
title = "Open with:"
history
"&Image Composer"
"&Photo Editor"
end
*/


integer proc TryToOpen(string fname, integer ln)
	integer fRet = FALSE
	integer fattr
	string ext[MAXEXT]
//	string stExe[MAXPATH] = ""
	string fn[MAXPATH] = fname

	if not Length(fn)
		goto Out
	endif

	// does file exist?
	fattr = FileExists(fn)

	#if 0
	// if file doesn't exist check for matches in the project files
	if not fattr and isMacroLoaded("proj")
		if ExecMacro("PROJ_GetFilePath "+fn)
			if Query(MacroCmdLine) == "*"
				// ambiguous filename
				fn = SplitPath(fn, _NAME_|_EXT_)
				SetGlobalInt(c_stFlatFilePrompt, TRUE)
				//$ review: this is a pretty cheesy way to disambiguate...
				if AskFilename("Select file to open:", fn) and Length(fn)
					fattr = FileExists(fn)
					if not fattr or (fattr & (_DIRECTORY_|_VOLUME_))
						Warn("File not found")
						goto Out
					endif
				else
					goto Out
				endif
			elseif Length(Query(MacroCmdLine))
				// exact match has been returned
				fn = Query(MacroCmdLine)
				fattr = FileExists(fn)
			endif
		endif
	endif
	#endif

	// if file exists, try to open it
	if fattr and not (fattr & (_DIRECTORY_|_VOLUME_))
		// get extension
		ext = Lower(SplitPath(fn, _EXT_))
		if Length(ext)
			ext = ext + "."
		endif

		/*
		// open it based on extension
		if Pos(ext, ".ico.bmp.gif.jpg.jpeg.jpe.")
			// image file, try to open image
			#ifdef WIN32
			case OpenWith()
				when 1
					stExe = "c:\Program Files\Microsoft Image Composer\IMGCOMP.EXE"
				when 2
					stExe = "C:\Program Files\Common Files\Microsoft Shared\PhotoEd\PHOTOED.EXE"
			endcase
			if Length(stExe) and ShellExecute(0, 0, stExe, QuotePath(ExpandPath(fn)), "", SE_SHOWNORMAL) <= 32
				Warn("Error opening image")
			endif
			#else
			Warn("Can only open image files with TSE 2.6")
			#endif
			fRet = TRUE
		else
			*/
			// other file
			fRet = EditFile(QuotePath(fn))
			if fRet
				UpdateHistoryStr(fn, _EDIT_HISTORY_)
				if ln
					GotoLine(ln)
					ScrollToRow(Query(WindowRows)/2)
				endif
			endif
			/*
		endif
		*/
	endif

Out:
	return(fRet)
end


// FilenameBegin()
// goto beginning of filename
proc FilenameBegin()
	integer i, n
	string ws[32] = Query(WordSet)

	i = 1
	while i < CurrPos()
		if CurrChar(i) == 34
			if Pos('"', GetText(i + 1, 255))
				n = i + 1 + Pos('"', GetText(i + 1, 255))
			else
				n = CurrLineLen()
			endif
			if n < CurrPos()
				// skip to next whitespace
				while n < CurrPos() and GetBit(ws, CurrChar(n))
					n = n + 1
				endwhile
				if n == CurrPos()
					GotoPos(i)
					#if 0 //def DEBUG
					Message("Starts:"; GetText(i, 255))
					Delay(8)
					#endif
					return()
				else
					#if 0 //def DEBUG
					Message("nope, not that one...")
					Delay(8)
					#endif
					i = n + 1
				endif
			else
				GotoPos(i)
				#if 0 //def DEBUG
				Message("Starts:"; GetText(i, 255))
				Delay(8)
				#endif
				return()
			endif
		elseif GetBit(ws, CurrChar(i))
			// skip to next whitespace
			n = i
			while n < CurrPos() and GetBit(ws, CurrChar(n))
				n = n + 1
			endwhile
			if n == CurrPos()
				GotoPos(i)
				#if 0 //def DEBUG
				Message("Starts:"; GetText(i, 255))
				Delay(8)
				#endif
				return()
			endif
			i = n
		else
			i = i + 1
		endif
	endwhile
	#if 0 //def DEBUG
	Message("No start found.")
	Delay(8)
	#endif
end


proc FilenameEnd()
	if CurrChar() == 34
		if lFind('"', '+c')
			Right()
		else
			EndLine()
		endif
	else
		EndWord()
		// also catch a trailing line number in parentheses
		lFind("[ \t]*([0-9]*)\c", "cx")
	endif
end


// OpenFileAtCursor()
// Tries to intelligently open the file at the cursor.  If file exists as
// stated, it loads it.  Otherwise it first checks in the current project's
// file list, then along the search path specified by TSE global var
// "PROJ_OpenPath" (c_stOpenPath).
string fnset[] = ChrSet("-!#-*.-:?@A-z{}~\d127-\d255")
integer proc OpenFileAtCursor()
	string ws[32], fn[MAXPATH] = "", fnTmp[MAXPATH] = ""
	integer line_no = 0
	integer fattr
	integer fRet = FALSE
	integer nPos
	//integer fQuotes = FALSE

	// get filename at cursor
	ws = Set(WordSet, fnset)
	Set(Marking, OFF)
	PushBlock()
	UnMarkBlock()
	PushPosition()

	// mark filename (handles long filenames, too)
	FilenameBegin()
	MarkChar()
	FilenameEnd()
	MarkChar()
	fn = GetMarkedText()
	ExpandEnvVars(fn)
	if Length(fn)
		if fn[1] == '"'
			//fQuotes = TRUE
			fn = DelStr(fn, 1, 1)
			if Pos('"', fn)
				fn = DelStr(fn, Pos('"', fn), 1)
			endif
		endif

		// trim trailing colon
		if fn[Length(fn)] == ":"
			fn = SubStr(fn, 1, Length(fn)-1)
		endif

		// look for (#) line number
		nPos = Pos("(", fn)
		if nPos
			line_no = Val(SubStr(fn, nPos+1, Length(fn)))
			fn = Trim(SubStr(fn, 1, nPos-1))
		endif
	endif

	PopPosition()
	PopBlock()
	Set(WordSet, ws)

	#if 0
	PushBlock()
	wset = Set(WordSet, fnset)
	if MarkWord()
		fn = GetMarkedText()

		// trim trailing colon
		if fn[Length(fn)] == ":"
			fn = SubStr(fn, 1, Length(fn)-1)
		endif

		// look for (#) line number
		nPos = Pos("(", fn)
		if nPos
			line_no = Val(SubStr(fn, nPos+1, Length(fn)))
			fn = SubStr(fn, 1, nPos-1)
		endif
	endif
	Set(WordSet, wset)
	PopBlock()
	#endif

	// does file exist?
	fattr = FileExists(fn)

	// if file doesn't exist check for matches in the project files
	if not fattr and Get_Int(iProjectId)
		fattr = GetFilePathPrompt(fn)
	endif

	// if file exists, try to open it
	if fattr and not (fattr & (_DIRECTORY_|_VOLUME_)) and TryToOpen(fn, line_no)
		fRet = TRUE
	elseif Length(fn) > 0
		// search path for fname
		fnTmp = mSearchPath(fn, GetOpenPath() +
				";"+SplitPath(CurrFilename(), _DRIVE_|_PATH_), ".")
		fRet = TryToOpen(fnTmp, line_no)
	endif

	return (fRet)
end


proc ProjectWideGrep()
	integer cid
	integer idTmp
	integer fVersionOk

	// verify Grep.Mac v2.2 or higher exists
	Set(MsgLevel, _NONE_)
	Set(MacroCmdLine, "")
	fVersionOk = isMacroLoaded("GrepGetVersion")
	if not fVersionOk
		if not isMacroLoaded("grep")
			fVersionOk = LoadMacro("grep")
		endif
	endif
	fVersionOk = fVersionOk and ExecMacro("GrepGetVersion")
	if not fVersionOk or Val(Query(MacroCmdLine), 16) < 0x0220
		Set(MsgLevel, _ALL_MESSAGES_)
		Warn("Requires Grep.Mac v2.2 or higher.")
		return()
	endif
	Set(MsgLevel, _ALL_MESSAGES_)

	// project-wide grep
	if Get_Int(iFListEnsured)
		cid = GetBufferId()
		idTmp = CreateTempBuffer()
		if idTmp
			// copy file list
			Set(MsgLevel, _NONE_)
			InsertFileList(FALSE)
			EndFile()
			if not CurrLineLen()
				KillLine()
			endif

			// preprocess file list
			#ifdef DEBUG
			BegFile()
			do NumLines() times
				Assert(CurrLineLen(), "should be no blank lines!")
				Down()
			enddo
			#endif
			lReplace(Format("^{.*}\x", Asc(c_stDiv):2:"0":16, "{.*}$"), "\2\1", "gxn")
			MarkLine(1, NumLines())
			#ifdef SORT_FOR_GREP
			Sort(_IGNORE_CASE_)
			#endif
			Set(MsgLevel, _ALL_MESSAGES_)

			// clean up
			PopBlock()
			GotoBufferId(cid)

			// do the grep
			ExecMacro("grep -B"+Str(idTmp))
		else
			Warn(c_errTmpBuf)
		endif
	else
		Setup_Ensure()
		Warn(c_errNotEnsured)
	endif
end


proc ShowClipboard()
	integer cid = GetBufferId()
	integer idTmp
	integer cx
	integer flags = 0

	idTmp = CreateTempBuffer()
	if idTmp
		Paste()

		cx = LongestLineInBuffer()
		if cx > Query(ScreenCols) - 2
			cx = Query(ScreenCols) - 2
			flags = _ENABLE_HSCROLL_
		endif
		lList("Clipboard", cx, 1000, flags)

		GotoBufferId(cid)
		AbandonFile(idTmp)
	endif
end


//$ todo: should this go on a menu somewhere?
<GREP_WHOLE_PROJECT_KEY>				ProjectWideGrep()

