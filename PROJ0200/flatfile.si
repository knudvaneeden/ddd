// MASTER FILE: ["proj.si"]
//#pragma inhouse,chrisant

// FLATFILE.SI ------------------------------------------------------------
// Flat file list functions for PROJ macro


#ifdef TRACE
//#define TRACE_EnsureFileList 1
#endif



// constants

constant REFRESH_THRESHOLD = 5			// if idle for this many minutes, starts an idle refresh of file list

string c_stFlatFilePrompt[] = "PROJ_FlatFilePrompt"



// variables

integer g_x1List = 0, g_y1List = 0, g_x2List = 0, g_y2List = 0

integer g_idPrompt = 0
integer g_idPrompt_Save = 0
string g_stPrompt[MAXPATH] = ""

integer g_iTop = -1
integer g_iCurrent = -1
integer g_rowCurrent = 0
integer g_iBottom
integer g_rowBottom

integer g_fNeedToMatchAfterCommand = FALSE

constant lmINIT = 1
constant lmPROGRESS = 2

forward proc Prompt_AfterCommand()
forward proc Prompt_Cleanup()
forward proc Prompt_Startup()
forward integer proc Match(string st)
forward proc ListMatches(integer mode)
forward proc InitMatchWindow()

#if 0
forward proc Prompt_Startup_Tags()
forward proc Prompt_Cleanup_Tags()
#endif
forward proc Prompt_DelayedMatch_Tags()
forward proc Prompt_AfterCommand_Tags()
forward proc InitMatchWindow_Tags()
forward keydef MatchKeys_Tags
forward keydef PromptKeys_Tags


integer fShowHelpLine = FALSE
//integer last_tick = 0

integer fDontDelGlobalVar = FALSE



string proc PrettyPath(string st, integer c)
	string stOut[MAXPATH]

	stOut = CapToken(GetToken(st, c_stDiv, 1)) + "  ("
	stOut = stOut + Lower(SqueezePath(GetToken(st, c_stDiv, 2), c - Length(stOut) - 1))
	stOut = stOut + ")"
	return(stOut)
end


string proc PrettyPath2(string st, integer c)
	string stOut[MAXPATH]
	string stPath[MAXPATH]

	stOut = CapToken(SplitPath(st, _NAME_|_EXT_))
	stPath = Lower(SplitPath(st, _DRIVE_|_PATH_))
	if Length(stPath)
		stOut = stOut + "  (" + SqueezePath(stPath, c - Length(stOut) - 4)
		stOut = stOut + ")"
	endif
	return(stOut)
end


string proc RealPath(string st)
	return (GetToken(st, c_stDiv, 2) + GetToken(st, c_stDiv, 1))
end


proc Idle_Reload()
	integer cid = GetBufferId()

	if FlatFile_FReload()
		// list is now ensured
		Set_Int(iFListEnsured, TRUE)
		UnHook(Idle_Reload)

		// update match window
		if QueryEditState() and cid and cid == g_idPrompt
			// avoid Prompt_Cleanup resolving whatever user has typed so far
			g_stPrompt = ""

			// force resize of match window
			fDontDelGlobalVar = TRUE
			//ExecHook(_PROMPT_CLEANUP_)
			//ExecHook(_PROMPT_STARTUP_)
			Prompt_Cleanup()
			Prompt_Startup()

			// update match window
			Match(g_stPrompt)
			ListMatches(0)
		endif
#if 0
	elseif Tags.......
		//$ todo: re-display tags
#endif
	else
		if QueryEditState() and cid and cid == g_idPrompt
			ListMatches(lmPROGRESS)
		endif
	endif
end


proc Stop_Ensure()
	if FlatFile_FBuilding()
		FlatFile_Abort(FALSE)
		UnHook(Idle_Reload)
	endif
end


proc Setup_Ensure()
	integer cid
	integer ich
	integer flags
	string st[_MAXPATH_]

	if FlatFile_FBuilding()
		return()
	endif

	cid = GotoBufferId(Get_Int(iPathListId))
	if Get_Int(iFNeedToEnsure)
		if FlatFile_PrepareToBuild(Get_Str(iProjectExtensions))
			Set_Int(iFNeedToEnsure, FALSE)

			// copy initial set of paths
			BegFile()
			do NumLines() times
				ich = 1
				flags = 0
				if CurrChar(1) == chExclude
					ich = 2
					flags = apExclude
				elseif CurrChar(1) == chSubdirs
					ich = 2
					flags = apSubDirs
				endif
				st = GetText(ich, 255)
				ExpandEnvVars(st)
				if Length(st)
					if isWildPath(st)
						st = SplitPath(GetText(ich, 255), _DRIVE_|_PATH_)
					endif
					if not FlatFile_AddPath(AddTrailingSlash(st), flags)
						goto Error
					endif
				endif
				Down()
			enddo

			if not FlatFile_ThreadedBuild()
				goto Error
			endif
		else
Error:
			Warn(c_errFlatFileBuild)
		endif

		Hook(_IDLE_, Idle_Reload)
		Hook(_NONEDIT_IDLE_, Idle_Reload)
	else
		Set_Int(iFListEnsured, TRUE)
	endif

	GotoBufferId(cid)
end


integer proc FindMatch(string st, integer iStart, integer ulFlags)
	string path[MAXPATH] = SplitPath(st, _DRIVE_|_PATH_)
	string fn[MAXPATH] = SplitPath(st, _NAME_|_EXT_)

	return (FlatFile_Lookup(fn, path, iStart, ulFlags))
end


proc ListMatches(integer mode)
	integer c = 0
	integer cRows
	integer i, j, k, l
	integer iIndex
	integer iPrev = -1
	integer ulFlags
	string st[255]
	string stHelpline[255] = ""
	integer attr = iif(g_iCurrent <> -1, Query(MsgAttr), Grayize(Query(MsgAttr)))

	#ifdef DEBUG
	Set(Break, ON)
	#endif

	i = Query(PopWinX1)
	j = Query(PopWinY1)
	k = Query(PopWinCols)
	l = Query(PopWinRows)

	Window(g_x1List, g_y1List, g_x2List, g_y2List)
	cRows = Query(PopWinRows)

	if FlatFile_FBuilding()
		st = "Searching... (" + Str(FlatFile_CFound()) + " files found)"
		VGotoXY(1, cRows + 1)
		PutStr(st[1:Query(PopWinCols)], Query(CurrWinBorderAttr))
	endif

	if mode <> lmPROGRESS
		if Get_Int(iFListEnsured)
			iIndex = iif(g_iTop == -1, 0, g_iTop)
			ulFlags = iif(g_iTop == -1, lookFirst, lookNext)
			iPrev = iIndex
			//BufferVideo()
			while c < cRows
				iIndex = FindMatch(g_stPrompt, iIndex, ulFlags)
				if iIndex == -1
					break
				endif

				ulFlags = lookNext
				c = c + 1
				st = FlatFile_GetFilename(iIndex)

				//$ review: should this use Menu___Attr instead?
				VGotoXY(1, c)
				PutLine(PrettyPath(st, Query(PopWinCols)), Query(PopWinCols),
						iif(iIndex == g_iCurrent, Query(HiLiteAttr), attr))

				if iIndex == g_iCurrent
					if fShowHelpLine
						stHelpline = PrettyPath(st, Query(ScreenCols))
					endif
				endif

				iPrev = iIndex
				iIndex = iIndex + 1
			endwhile
			//UnBufferVideo()
		endif

		g_iBottom = iPrev
		g_rowBottom = c

		if c < cRows and (mode == lmINIT or Get_Int(iFListEnsured))
			Window(g_x1List, g_y1List+c, g_x2List, g_y2List)
			c = Set(Attr, attr)
			ClrScr()
			Set(Attr, c)
		endif

		if fShowHelpLine and (mode == lmINIT or Get_Int(iFListEnsured))
			Window(1, GetHelpLineRow(), Query(ScreenCols), GetHelpLineRow())
			//VHomeCursor()
			PutLine(stHelpline, Query(ScreenCols), Query(HelpTextAttr))
		endif
	endif

	Window(i, j, i+k-1, j+l-1)
end


integer proc Match(string st)

	g_iCurrent = -1
	g_iTop = -1
	g_rowCurrent = 0
	if Get_Int(iFListEnsured)
		if Length(st) and not isWildPath(st) and not Pos(c_stDiv, st)
			g_iCurrent = FindMatch(st, 0, lookFirst)
			if g_iCurrent <> -1
				g_iTop = g_iCurrent
				g_rowCurrent = 1
				g_stPrompt = st
				goto Out
			endif
		endif
		g_stPrompt = ""
	else
		g_stPrompt = st
	endif

Out:
	return (Length(g_stPrompt))
end


constant matchTOP = -3
constant matchPGUP = -2
constant matchPREV = -1
constant matchNEXT = 1
constant matchPGDN = 2
constant matchBOTTOM = 3

proc NextMatch(integer flag)
	integer iTop = g_iTop
	integer iCurrent = g_iCurrent
	integer iIndex
	integer c, cRows = g_y2List - g_y1List + 1

	if Get_Int(iFListEnsured) and g_iCurrent <> -1
		case flag
			when matchPREV
				iIndex = FindMatch(g_stPrompt, g_iCurrent-1, lookPrev)
				if iIndex <> -1
					g_iCurrent = iIndex
					if g_rowCurrent == 1
						g_iTop = iIndex
					else
						g_rowCurrent = g_rowCurrent - 1
					endif

					#ifdef DEBUG
					Assert(g_rowCurrent > 0, "probably forgot to initialize g_rowCurrent somewhere")
					#endif
				endif

			when matchNEXT
				iIndex = FindMatch(g_stPrompt, g_iCurrent+1, lookNext)
				if iIndex <> -1
					g_iCurrent = iIndex
					if g_rowCurrent == (g_y2List - g_y1List + 1)
						g_iTop = FindMatch(g_stPrompt, g_iTop+1, lookNext)
					else
						g_rowCurrent = g_rowCurrent + 1
					endif

					#ifdef DEBUG
					Assert(g_rowCurrent <= (g_y2List - g_y1List + 1), "how did g_rowCurrent become > number of rows?")
					#endif
				endif

			when matchTOP
				g_iCurrent = FindMatch(g_stPrompt, 0, lookFirst)
				g_iTop = g_iCurrent
				g_rowCurrent = 1

			when matchBOTTOM
				iIndex = FindMatch(g_stPrompt, FlatFile_GetCount()-1, lookLast)
				g_iCurrent = iIndex
				g_rowCurrent = 1

				if iIndex <> -1
					// set g_iTop
					c = cRows - 1
					g_iTop = iIndex
					while c
						iIndex = FindMatch(g_stPrompt, iIndex - 1, lookPrev)
						if iIndex == -1
							break
						endif
						g_iTop = iIndex
						g_rowCurrent = g_rowCurrent + 1
						c = c - 1
					endwhile
				endif

			when matchPGUP
				c = cRows - 1
				iIndex = g_iCurrent
				while c
					iIndex = FindMatch(g_stPrompt, iIndex - 1, lookPrev)
					if iIndex == -1
						g_rowCurrent = 1
						g_iTop = g_iCurrent
						break
					endif
					g_iCurrent = iIndex
					c = c - 1
				endwhile
				if not c
					c = cRows - 1
					iIndex = g_iTop
					while c
						iIndex = FindMatch(g_stPrompt, iIndex - 1, lookPrev)
						if iIndex == -1
							g_rowCurrent = 1
							g_iCurrent = g_iTop
							break
						endif
						g_iTop = iIndex
						c = c - 1
					endwhile
				endif

			when matchPGDN
				c = cRows - 1
				iIndex = g_iBottom
				if g_rowBottom == cRows
					while c
						iIndex = FindMatch(g_stPrompt, iIndex + 1, lookNext)
						if iIndex == -1
							g_rowCurrent = cRows
							g_iCurrent = g_iBottom
							break
						endif
						g_iBottom = iIndex
						g_iCurrent = FindMatch(g_stPrompt, g_iCurrent + 1, lookNext)
						g_iTop = FindMatch(g_stPrompt, g_iTop + 1, lookNext)
						c = c - 1
					endwhile
				else
					g_iCurrent = g_iBottom
					g_rowCurrent = g_rowBottom
				endif
		endcase

		if iTop <> g_iTop or iCurrent <> g_iCurrent
			ListMatches(0)
		endif
	else
		case Query(Key)
			when <CursorUp>, <GreyCursorUp>
				// can't chain b/c histories are done via CmdMaps
				PushKey(<BOGUS_UP>)
			when <CursorDown>, <GreyCursorDown>
				// can't chain b/c histories are done via CmdMaps
				PushKey(<BOGUS_DOWN>)
			otherwise
				GreyChainCmd()
		endcase
	endif
end


proc Click()
	integer x, y
	integer iIndex
	integer iNext

	x = Query(MouseX)
	y = Query(MouseY)
	if x > 32767
		x = x - 65536
	endif
	if y > 32767
		y = y - 65536
	endif

	x = x + Query(PopWinX1) - 1
	y = y + Query(PopWinY1) - 1

	if x >= g_x1List and x <= g_x2List and y >= g_y1List and y <= g_y2List
		if Get_Int(iFListEnsured) and g_iCurrent <> -1
			iIndex = -1
			iNext = g_iTop

			do y - g_y1List times
				iIndex = FindMatch(g_stPrompt, iNext, lookNext)
				iNext = iIndex + 1
			enddo

			if iIndex <> -1
				g_iCurrent = iIndex
				EndProcess(TRUE)
			endif
		endif
	else
		ChainCmd()
	endif
end


proc RefreshFileList()
	integer fInPrompt

	if not Get_Int(iProjectId)
		Warn(c_errNoProject)
		return()
	endif

	Set_Int(iFNeedToEnsure, TRUE)

	fInPrompt = (QueryEditState() and g_idPrompt and GetBufferId() == g_idPrompt)
	if fInPrompt
		// avoid resolving whatever user has typed so far
		g_stPrompt = ""

		// force resize of match window
		fDontDelGlobalVar = TRUE
		//ExecHook(_PROMPT_CLEANUP_)
		//ExecHook(_PROMPT_STARTUP_)		// this also calls Setup_Ensure()
		Prompt_Cleanup()
		Prompt_Startup()				// this also calls Setup_Ensure()

		#if 0
		// update match window
		Match(g_stPrompt)
		ListMatches(0)
		#endif
	else
		Setup_Ensure()
	endif
end


integer fIdleRefresh = FALSE

proc Idle_FileList()
	if Get_Int(iProjectId)
		if not QueryEditState()
			fShowHelpLine = Query(ShowHelpLine)
		endif

		//$ todo: refresh once every <x> <units>

		// if idle for <n> minutes, refresh the file list
		if not fIdleRefresh and Query(IdleTime) > REFRESH_THRESHOLD * 6000
			fIdleRefresh = TRUE
			Setup_Ensure()
		elseif Query(IdleTime) < REFRESH_THRESHOLD * 6000
			fIdleRefresh = FALSE
		endif
	endif
end


#ifdef STATE
#ifndef TSE28
forward proc DoProjectSettings()
forward proc DoOptionsMenu()


menu PromptMenu()
	title = "Project"
	history

	"R&efresh file list",				RefreshFileList(), CloseBefore, "Refresh list of files in the current project."
	"Pro&ject settings  ",				DoProjectSettings(), DontClose, "Change settings for the current project."
	"Op&tions  ",						DoOptionsMenu(), DontClose, "Change general options that affect all projects."
	"&Help",							DoHelpEx(c_stMainHelp)
end


proc lDoPromptMenu()
	integer fEditState = QueryEditState()
	integer id

	if fEditState
		id = PushMessage("")
	endif

	ShowVersion(FALSE)
	Set_Int(iFDoingMenu, TRUE)
	PromptMenu()
	Set_Int(iFDoingMenu, FALSE)

	if fEditState
		PopMessage(id, not Get_Int(iFTimeoutHooked))
	elseif not Get_Int(iFTimeoutHooked)
		UpdateDisplay(_STATUSLINE_REFRESH_)
	endif
end
#endif
#endif


proc DoPromptMenu()
	integer i, j, k, l
	string stCurrDir[MAXPATH] = "["+Lower(CurrDir())+"]"
	string st[MAXPATH] = ""

	i = Query(PopWinX1)
	j = Query(PopWinY1)
	k = Query(PopWinCols)
	l = Query(PopWinRows)

	Set(X1, WhereXAbs())
	Set(Y1, WhereYAbs()+1)

	g_stPrompt = ""			// avoid resolving whatever user has typed so far
	fDontDelGlobalVar = TRUE
	Prompt_Cleanup()
	Set_Int(iCPrompts, Get_Int(iCPrompts) + 1)

	#ifdef TSE28
	DoProjectMenu()
	#else
	lDoPromptMenu()
	#endif

	Window(i, j, i+k-1, j+l-1)
	GetStrXY(1, 0, st, 200)
	i = Pos(stCurrDir, Lower(st))
	if i
		st = "["+CurrDir()+"]"
		PutStrXY(i, 0, Format(st:-max(Length(st), Length(stCurrDir))),
				Query(MsgAttr))
	endif

	Set_Int(iCPrompts, Get_Int(iCPrompts) - 1)
	Prompt_Startup()
end


integer fMatchKeys = FALSE
keydef MatchKeys
<CursorUp>					NextMatch(matchPREV)
<CursorDown>				NextMatch(matchNEXT)
<PgUp>						NextMatch(matchPGUP)
<PgDn>						NextMatch(matchPGDN)
<Ctrl PgUp>					NextMatch(matchTOP)
<Ctrl PgDn>					NextMatch(matchBOTTOM)
<LeftBtn>					Click()

<BOGUS_UP>					Up()
<BOGUS_DOWN>				Down()

<F5>						RefreshFileList()
end


keydef PromptKeys
<PROJECT_MENU_KEY>			DoPromptMenu()
end


#define MAX_WIDTH 48
proc InitMatchWindow()
	integer i, j, k, l
	integer cx
	integer cy = max(Query(ScreenRows)/3, 12)
	integer attr

	#ifdef DEBUG
	Assert(not g_idPrompt_Save, "window already saved")
	#endif

	// calc width
	if not Get_Int(iFListEnsured)
		cx = MAX_WIDTH
	else
		cx = Max(16, FlatFile_CchLongestPath()+4)
		cx = Max(cx, Length(Get_Str(iProjectTitle))+2)
		cx = Min(cx, MAX_WIDTH)
	endif

	// calc window location and dimensions
	g_x1List = Query(PopWinX1) + 3
	if g_x1List + cx > Query(ScreenCols)
		g_x1List = Query(ScreenCols) - cx
	endif
shrink_vert:
	g_y1List = Query(PopWinY1) + Query(PopWinRows) + 1
	if g_y1List + cy > Query(ScreenRows) - 1
		if Query(PopWinY1) - (cy + 2) > 2
			g_y1List = Query(PopWinY1) - (cy + 2)
		else
			//$ review: el cheapo iterative shrink instead of the more
			// intellectually challenging absolute shrink.  so i'm lazy.
			cy = cy - 1
			goto shrink_vert
		endif
	endif
	g_x2List = g_x1List + cx - 1
	g_y2List = g_y1List + cy - 1

	g_idPrompt_Save = SaveWindow(g_x1List-1, g_y1List-1, cx+2, cy+2)
	if g_idPrompt_Save
		i = Query(PopWinX1)
		j = Query(PopWinY1)
		k = Query(PopWinCols)
		l = Query(PopWinRows)

		Window(g_x1List-1, g_y1List-1, g_x2List+1, g_y2List+1)
		DrawBox(1, Query(MenuBorderAttr))
		attr = Set(Attr, Query(MenuBorderAttr))
		PutCtrStr(Ellipsify(Get_Str(iProjectTitle), cx-2), 1)
		Set(Attr, attr)
		Window(i, j, i+k-1, j+l-1)

		Match(g_stPrompt)
		ListMatches(lmINIT)

		if not fMatchKeys
			fMatchKeys = Enable(MatchKeys)
		endif

		g_fNeedToMatchAfterCommand = FALSE
		Hook(_AFTER_NONEDIT_COMMAND_, Prompt_AfterCommand)
	else
		g_x1List = 0
		g_y1List = 0
		g_x2List = 0
		g_y2List = 0
		Warn("Unable to save area under window.")
	endif
end


proc MaybeReplacePrompt(string st)
	if Length(st)
		BegLine()
		KillToEol()
		InsertText(st)
	endif
end


proc Prompt_DelayedMatch()
	string st[MAXPATH]

	g_fNeedToMatchAfterCommand = FALSE
	UnHook(Prompt_DelayedMatch)
	if g_idPrompt == GetBufferId()
		st = GetText(1, MAXPATH)
		if g_stPrompt <> st
			Match(st)
			ListMatches(0)
		endif
	endif
end


proc Prompt_AfterCommand()
	Hook(_NONEDIT_IDLE_, Prompt_DelayedMatch)
	g_fNeedToMatchAfterCommand = TRUE
end


proc RestoreWindow_Prompt()
	RestoreWindow(g_idPrompt_Save)
	UpdateDisplay(_ALL_WINDOWS_REFRESH_)
	g_idPrompt = 0

	g_x1List = 0
	g_y1List = 0
	g_x2List = 0
	g_y2List = 0
end


integer fPromptHooked = FALSE
string c_stEditPrompt[] = "Prompt->File(s) to edit:"
integer fTags

proc Prompt_Cleanup()
	string st[MAXPATH] = ""
	integer attr

	Set_Int(iCPrompts, Get_Int(iCPrompts) - 1)
	if not Get_Int(iCPrompts)
		Disable(PromptKeys)
#ifdef PROMPT_TAG_MENU
		Disable(PromptKeys_Tags)
#endif

		if fPromptHooked
			if not fDontDelGlobalVar
				DelGlobalVar(c_stFlatFilePrompt)
			endif
			fDontDelGlobalVar = FALSE

			if fMatchKeys
				fMatchKeys = FALSE
				Disable(MatchKeys)
				Disable(MatchKeys_Tags)
			endif

			UnHook(Prompt_AfterCommand)
			UnHook(Prompt_DelayedMatch)
			UnHook(Prompt_AfterCommand_Tags)
			UnHook(Prompt_DelayedMatch_Tags)
			fPromptHooked = FALSE

			if g_fNeedToMatchAfterCommand
				g_fNeedToMatchAfterCommand = FALSE
				if fTags
					Prompt_DelayedMatch_Tags()
				else
					Prompt_DelayedMatch()
				endif
			endif

			RestoreWindow_Prompt()

			if Length(g_stPrompt)
				if g_iCurrent <> -1
					if fTags
						st = Tags_GetSymbol(g_iCurrent)
					else
						attr = FileExists(Trim(g_stPrompt))
						if (not attr) or (attr & _DIRECTORY_)
							st = QuotePath(RealPath(FlatFile_GetFilename(g_iCurrent)))
						endif
					endif
					MaybeReplacePrompt(st)
				endif
			elseif not fTags
				// if not a match, see if we can find it along the OpenPath
				st = Trim(GetText(1, 255))
				if NumFileTokens(st) == 1
					st = Trim(RemoveQuotes(st))
					if not Length(SplitPath(st, _DRIVE_|_PATH_)) and
							not FileExists(st)
						// if no drive/path specified and file not found, search
						// the OpenPath.
						st = mSearchPath(st, GetOpenPath(), "")
						st = QuotePath(st)
						MaybeReplacePrompt(st)
					endif
				endif
			endif
		endif
	endif
end


proc Prompt_Startup()
	fTags = (Query(PromptString) == c_stPromptFindTag)

	if not Get_Int(iCPrompts)
		if fTags
			fPromptHooked = Tags_FLoaded() and Query(PromptString) == c_stPromptFindTag
		else
			// only if project is open and this is an EditFile prompt, or a
			// macro has requested this prompt to support the flat file list.
			fPromptHooked = Get_Int(iProjectId) and
					(SubStr(Query(PromptString), 1, Length(c_stEditPrompt)) == c_stEditPrompt or
					GetGlobalInt(c_stFlatFilePrompt))
		endif
		if fPromptHooked
			g_idPrompt = GetBufferId()
			g_stPrompt = GetText(1, MAXPATH)

			if fTags
				InitMatchWindow_Tags()
			else
				Setup_Ensure()
				InitMatchWindow()
			endif
		endif
		if fTags
#ifdef PROMPT_TAG_MENU
			Enable(PromptKeys_Tags)
#endif
		else
			Enable(PromptKeys)
		endif
	endif

	Set_Int(iCPrompts, Get_Int(iCPrompts) + 1)
end


string proc GetFilePath(string st)
	integer i
	string path[_MAXPATH_] = SplitPath(st, _DRIVE_|_PATH_)
	string fn[_MAXPATH_] = SplitPath(st, _NAME_|_EXT_)

	i = FlatFile_Lookup(fn, path, 0, lookFirst)
	if i <> -1 and FlatFile_Lookup(fn, path, i+1, lookNext) <> -1
		path = "*"
	else
		path = RealPath(FlatFile_GetFilename(i))
	endif
	return (path)
end


integer proc GetFilePathPrompt(var string fn)
	integer fattr = 0

	case GetFilePath(fn)
		when ""
			// not found in project
			fattr = FileExists(fn)
		when "*"
			// multiple matches found
			fn = SplitPath(fn, _NAME_|_EXT_)
			SetGlobalInt(c_stFlatFilePrompt, TRUE)
			//$ review: this is a pretty cheesy way to disambiguate...
			if AskFilename("Select file to open:", fn) and Length(fn)
				fattr = FileExists(fn)
				if not fattr or (fattr & (_DIRECTORY_|_VOLUME_))
					Warn("File not found")
					fattr = 0
				endif
			endif
		otherwise
			// exact match found
			fn = GetFilePath(fn)
			fattr = FileExists(fn)
	endcase

	return (fattr)
end

