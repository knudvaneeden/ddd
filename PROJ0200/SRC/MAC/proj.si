// PROJ.SI - chrisant@microsoft.com ---------------------------------------


//$ todo: concept of project "root", so local projects can specify relative paths in the Add Files list, etc
//$ todo: lCloseProject, PushProjectBuffers, PopProjectBuffers, etc - can toast FlatFile and Tags!


#include ["defs.si"]


// v1.00 ------------------------------------------------------------------
//done: auto load directories; automatically load associated project when started from matching directory
//done: when user opens a .PJ file, automatically open it as a project - see PROJECTS.S for example
//done: do matching on "foo\foo" in flat file list
//done: when saving list of open files, it saves several TSE settings with each filename, in case user is running a macro that remembers TSE settings on a per-file basis, such as FS.MAC
//done: '-P' dos command line option forces not to load a project
//done: '-Pproject_file' dos command line option loads project "project_file"
//done: open project from command line
//done: cmdline flag to force not to open a project
//done: grep-whole-project via ExecMacro("grep -B......")
//done: saves TSE clipboard
//done: for now, simple list for Open Project, of LoadDir()+"proj\*.pj"
//done: running list of all existing projects, use this list to prompt user for project to open
//done: before opening a project, prompt to save files
//done: after opening a project, quit any files that weren't open last time the project was saved
//done: database is stored in LoadDir, project files are stored in user-configurable subdirectory of LoadDir.
//done: automatically runs you thru getting PROJ set up, the first time you execute PROJ
//done: added TSE28 #define to allow compiling for TSE 2.8 or TSE 2.6
//done: if TSE clipboard is big, confirm saving it
//done: when opening a file via the EditFile command, if the file entered by the user is not found, automatically search the OpenPath
//done: can specify file types recognized by a specific project
//fixed: if a file wasn't found when opening a project, user was left in an empty system file

// v1.10 ------------------------------------------------------------------
//fixed: if project filename contained a period (eg, "MyThing v1.0") the keyboard macros were saved to an incorrect filename and were not able to be reloaded
//fixed: default extensions got erased if you went to open a project and then canceled (or went to create a new project and canceled, etc)
//done: fully qualify paths entered in the "include files in this path" prompt
//fixed: "include loaded files in project?" prompt was pretty misleading, changed to "close all open files?"
//fixed: adding paths to the project was not clearing the file list before rebuilding it, resulting in duplicates
//done: can add paths to exclude; all files in that path and subdirs are excluded from the project (can be overridden on specific directories by explicitly listing the directory to include; cannot override subdir behavior, though)
//fixed: for some users crash could happen (was trying up to 32 windows, but GotoWindow didn't have error checking to fail when appropriate)
//done: support for Exuberant CTags!  if no project is loaded, supports CTags in current directory so the CTags support can still be used even if you don't have a project for the current directory.
//fixed: cancel when creating new project did not cancel correctly
//fixed: "default extensions for new projects" wasn't being used for new projects
//done: you can specify an explicit location for the project-wide tags file.  this means you can build it in your make file!

// v1.11 ------------------------------------------------------------------
//fixed: oops, compiling for TSE2.6 left out CTags support!
//fixed: two commands were trying to display listboxes 82 characters wide, so if the "screen" was not at least 82 characters wide, they failed.
//done: BACKGROUND THREAD for building file list!  MUCH faster and smoother!
//done: PgUp/Dn and Ctrl-PgUp/Dn now work in the file list

// v1.50 ------------------------------------------------------------------
//NEW: added .BSC support for MSVC browse files!
//NEW: uses new TSE3.0 SaveHistory/LoadHistory commands
//NEW: supports new TSE3.0 ReadOnlyBuffer command (saves/restores buffer's readonly state -- not same as a file's readonly attribute)
//done: commands to save/load clipboard (public procs, even!)
//NEW: supports autoloading Local projects, i.e. "local.pj" in the current directory

// v2.00 ------------------------------------------------------------------
//NEW: support for TSE 4.0 (also still supports 2.6 through 3.0).
//
// Various other improvements, features, and bug fixes.  Sorry, it's been so
// long since the last official release (v1.10) that I've lost track of what
// other improvements have gone in.  Sadly, the help has remained essentially
// unchanged, so it's still "under construction".


/*

WISH LIST:

//$ todo: multiple clipboards?
//$ todo: clipboard management - show contents of clipboards, maybe a lightweight clipboard package?

//$ todo: "audit bookmarks"?
//$ todo: clipboard stuff?
//$ todo: logging?
//$ todo: add some general commands to the menus (common commands using grep, etc)

//$ review: parse command line, load and strip matches, leave non-matches for TSE to load?
//$ review: purge files/kbdmacros when closing a project?  i don't think so.
//$ review: sorting file list for grep-whole-project is slow (SORT_FOR_GREP) -- NOTE: doubly-indexed file list would fix this!
//$ review: what about saving/opening state from a prompt?  problems with how prompts handle buffers.

*/



///////////////////////////////////////////////////////////////////////////
// Constants

#define BOGUS_UP		0x7770
#define BOGUS_DOWN		0x7771


string c_stExtensions[] = "Extensions"
string c_stDefaultExtensions[] = "c h cpp hpp s si ui inc si asm cxx hxx rc rc2 pp csv idl odl mak ini cfg bat btm"

string c_stAssociatedExtensions[] = "[AssociatedExtensions]"
string c_stOptions[] = "[Options]"
string c_stAllProjects[] = "[AllProjects]"
string c_stAutoLoad[] = "[AutoLoad]"

string c_stFindTag[] = "Find tag:"
string c_stPromptFindTag[] = "Prompt->Find tag:"


forward proc DoProjectMenu()



///////////////////////////////////////////////////////////////////////////
// Global Variables



///////////////////////////////////////////////////////////////////////////
// Symbolic Information

#ifdef CTAGS
string c_stExtTag[] = ".tag"
string c_stTagExts[] = ".h.c.cc.cpp.hpp.hxx.cxx."

integer g_hist = 0
#endif


#ifdef BSCTAGS
//string c_stExtBsc[] = ".bsc"
//string c_stBscExts[] = ".h.c.cc.cpp.hpp.hxx.cxx."
#endif



///////////////////////////////////////////////////////////////////////////
// DLLs

#include ["projdll.si"]


dll "<kernel32.dll>"
	integer proc MkDir(string dir:cstrval, integer sa) : "CreateDirectoryA"
end


#if 0
dll "<kernel32.dll>"
	integer proc GetShortPathName(string long_fn:cstrval,
			var string short_fn:strptr, integer n) : "GetShortPathNameA"
end


string proc GetShortFilename(string long_fn)
	string short_fn[MAXPATH] = Format("":MAXPATH)

	return (iif(GetShortPathName(long_fn, short_fn, sizeof(short_fn)) > 0,
			SubStr(short_fn, 1, Pos(Chr(0), short_fn)-1), long_fn))
end
#endif



///////////////////////////////////////////////////////////////////////////
// Include

#define NEED_PROJ_PROMPTS 1
#define NEED_EXPANDENVVARS 1
#define NEED_MSEARCHPATH 1
#define NEED_GRAYIZE 1
#define NEED_GETHELPLINEROW 1
#define NEED_GRAYCHAINCMD 1
#define NEED_ELLIPSIFY 1
#define NEED_GETOPENPATH 1
#define NEED_MCREATETEMPBUFFER 1
#define NEED_GETTEMPFILE 1
#define NEED_MF 1
#define NEED_BEEP 1
#define NEED_UPDATEHISTORYSTR 1
#define NEED_DOHELPEX 1
#define NEED_MAINHELP 1
#define NEED_INIVERSION 1
#define NEED_WRITEPROFILE 1
#define NEED_DOSCMDLINEOPTIONUSED 1
#define NEED_SCANFOR 1
#define NEED_ISWHITESTR 1

//#include ["hackforw.si"]
#include ["common.si"]
#include ["stubs1.si"]

// ------------------------------------------------------------------------
#include ["keys.si"]
#include ["errors.si"]
#include ["help.si"]
#include ["domenu.si"]

// ------------------------------------------------------------------------
//#include ["pjfile.si"]

// ------------------------------------------------------------------------
#include ["flatfile.si"]
#ifdef ANYTAGS
#include ["ctags.si"]
#endif
#include ["commands.si"]
#include ["clip.si"]
#include ["public.si"]

// ------------------------------------------------------------------------
// menus (ideally these would come last, but due to bug in TSE 2.6 and 2.8
// where menus that come after the first 32k of the macro do not function
// correctly, i put this here and just use forward declarations for everything
// the menus need).
#ifdef TSE28
#include ["menus28.si"]
#else
#include ["menus26.si"]
#endif
#include ["menus.si"]

// ------------------------------------------------------------------------
#include ["tooltip.si"]



///////////////////////////////////////////////////////////////////////////
// First Run

// HandleFirstRun()
// check for first run scenario and do setup
integer proc HandleFirstRun()
	integer cVer
	string st[MAXPATH]
	integer fAutoLoad
	integer cid, idTmp
	integer fWasFirstRun = FALSE

	// check for first run scenario
	cVer = GetIniVersion()
	if cVer < c_nVer
		#ifdef DEBUG
		if cVer
			MsgBox(c_stTitle, Format("PROJ v", cVer:4:"0":16;
					"is currently installed.  ",
					"Upgrading to v", c_nVer:4:"0":16, "."))
		else
			MsgBox(c_stTitle, Format("PROJ is not installed.  ",
					"Installing v", c_nVer:4:"0":16, "."))
		endif
		#endif

		if Length(Query(PromptString))
			#ifdef DEBUG
			Warn("Cannot do first run setup from a prompt!")
			#endif
			goto Error
		endif

		//$ todo: check if we're just upgrading?

		// first run, do automatic setup
		Set_Int(iFFirstRun, TRUE)
		fWasFirstRun = TRUE

		// welcome message
		//DoHelp(WelcomeMessage)
		DoHelpEx(c_stMainHelp)

		// ask for PJ directory
		if cVer == 0
			EditProjDir(FALSE)
		endif

		// generate default database
		if OpenDatabase()
			GetDatabaseOptions()
			SetDatabaseOptions()

			if cVer < 0x0100
				cid = GotoBufferId(Get_Int(iDatabaseId))
				if cid
					// some redundant default associated extensions, to help
					// make the feature discoverable.
					if not MarkProjectSection(c_stAssociatedExtensions)
						InsertLine(".c=h hpp")
						AddLine(".cc=h hpp")
						AddLine(".cpp=h hpp")
						AddLine(".h=c cc cpp")
						AddLine(".hpp=c cc cpp")
					endif

					// extensions to recognize when adding files to a project.
					// this value in the project database is only used when
					// creating a new project; when actually adding files to a
					// project, it looks in project file instead of database.
					MarkProjectSection(c_stOptions)
					if not Length(GetProjectStr(c_stExtensions, ""))
						SetProjectStr(c_stExtensions, c_stDefaultExtensions)
					endif

					GotoBufferId(cid)
				endif
			endif

			SaveDatabase()
		endif

		// init profile entries
		WriteProfileStr(c_stIniSection, c_stIniVersion, Format(c_nVer:4:"0":16))
		WriteProfile()

		// check if PROJ is in the autoload list
		fAutoLoad = FALSE
		cid = GetBufferId()
		idTmp = CreateTempBuffer()
		if idTmp
			PushBlock()
			BinaryMode(-1)
			InsertFile(LoadDir()+"tseload.dat", _DONT_PROMPT_)
			fAutoLoad = lFind("proj", "^$gi")
			GotoBufferId(cid)
			AbandonFile(idTmp)
		endif
		if not fAutoLoad
			// if not in autoload list, prompt to add it
			if MsgBox(c_stTitle,
					"Would you like to add PROJ to your AutoLoad macro " +
					"list?  (The recommended choice is Yes)",
					_YES_NO_) == 1
				st = SearchPath(SplitPath(CurrMacroFilename(), _NAME_|_EXT_),
						Query(TSEPath), "mac")
				if Lower(st) == Lower(CurrMacroFilename())
					// the proj macro was found in the mac\ directory, so just
					// add the name without the path.
					AddAutoLoadMacro(SplitPath(st, _NAME_))
				else
					// the proj macro is not in the mac\ directory, so add the
					// full pathname of the proj macro.
					AddAutoLoadMacro(CurrMacroFilename())
				endif
			endif
		endif

		// recommend StartupFlags be _STARTUP_PROMPT_
		if Query(StartupFlags) <> _STARTUP_PROMPT_
			if MsgBox(c_stTitle,
					"Would you like to show the EditFile prompt " +
					"when TSE is started with an empty command "+
					"line?  (The recommended choice is Yes)",
					_YES_NO_) == 1
				Set(StartupFlags, _STARTUP_PROMPT_)
				SaveSettings()
			endif
		endif

		// prompt to create a new project
		if not cVer
			if MsgBox(c_stTitle,
					"Would you like to create a new project?  " +
					"(You can create a new project later by pressing <" +
					KeyName(PROJECT_MENU_KEY) + "> and selecting " +
					'"New Project..." from the menu.)', _YES_NO_) == 1
				NewProject()
			endif
		endif

		// friendly reminder...
		ShowVersion(FALSE)
		MsgBox(c_stTitle, "PROJ is finished setting up.  At any time, press <" +
				KeyName(PROJECT_MENU_KEY) + "> to show the Projects menu.")
		ShowVersion(TRUE)
		UpdateDisplay()

		Set_Int(iFFirstRun, FALSE)
	endif

Error:
	Set(Key, -1)
	return(fWasFirstRun)
end


///////////////////////////////////////////////////////////////////////////
// Hooks

proc OnAbandonEditor()
	Set_Int(iFAbandonEditor, TRUE)

	//$ todo: should we automatically save if it's changed, or prompt to save
	// if it's changed, or always save (as we currently do)?
	if Get_Int(iProjectId) and Get_Int(iFAutoSave)
		SaveProject(FALSE)
	endif

	WriteProfile()

	AbandonFile(Get_Int(iDatabaseId))
	Set_Int(iDatabaseId, 0)

	Set_Int(iFAbandonEditor, FALSE)
end


#ifdef BUG_LoadStartupMacros
//$ hack:  kind of ugly...
integer g_idHack
integer g_cHack
#endif

proc Idle_Initialize()
	//if BufferType() == _NORMAL_
	if not QueryEditState()
		UnHook(Idle_Initialize)
		Set_Int(iFEverIdle, TRUE)

		#ifdef BUG_LoadStartupMacros
		if GetBufferId() <> g_idHack and
				NumFiles() == g_cHack and
				not Length(CurrFilename())
			if GotoBufferId(g_idHack)
				ExecHook(_ON_CHANGING_FILES_)
			endif
			UpdateDisplay()
		endif
		#endif

		// look for first run scenario
		HandleFirstRun()
	endif
end



///////////////////////////////////////////////////////////////////////////
// Auto Macros

proc WhenPurged()
	//$ todo: should CloseProject() automatically save if it's changed, or
	// prompt to save if it's changed, or always save (as we currently do)?
	if Get_Int(iProjectId)
		//$ review: cant cancel...
		CloseProject(FALSE)
	endif

	WriteProfile()
	lCloseProject()

	AbandonFile(Get_Int(iDatabaseId))
	Set_Int(iDatabaseId, 0)

	DLL_WhenPurged()
end


proc WhenLoaded()
	string fn[MAXPATH] = ""
	string stPath[MAXPATH] = ""
	string stCurrDir[MAXPATH] = Lower(CurrDir())
	integer cid
	integer fOptionP = FALSE
	integer fPrompt = FALSE

	if not EnsureSupportLoaded()
		goto Error
	endif

	// initialize
	SetGlobalStr("PROJ_Version", c_stVer)
	DelGlobalVar(c_stFlatFilePrompt)
	#ifdef ANYTAGS
	g_hist = GetFreeHistory("CTAGS:tag")
	#endif

	// hooks
	if not Hook(_PROMPT_STARTUP_, Prompt_Startup) or		// flat file list
			not Hook(_PROMPT_CLEANUP_, Prompt_Cleanup) or	// flat file list
			not Hook(_IDLE_, Idle_FileList) or				// flat file list
			not Hook(_ON_ABANDON_EDITOR_, OnAbandonEditor)
		Warn("Unable to initialize PROJ macro.")
		goto Error
	endif

	#if 0
	// check version
	if not (GetIniVersion() in 0, c_nVer)
		//$ todo: ask if user wants to upgrade to this version?
	endif
	#endif

	// open project database
	if not OpenDatabase()
		Warn(c_errNoOpenProjDB)
		goto Error
	endif

	// get global options
	GetDatabaseOptions()
	Set_Str(iProjDir, GetProfileStr(c_stIniSection, c_stProjDir, "PJ\"))

	// decide what (if any) project to load
	fOptionP = DosCmdLineOptionUsed("P")
	if fOptionP
		// -P option was used, set fn = the parameter of -P (no parameter
		// means force not to load any project).  -Pfoo loads the first
		// project whose name begins with "foo".
		// -P* prompts for project to open.
		fn = Trim(GetGlobalStr("ArgP"))
		// if no path specified, check if we already know a path for a project
		// by the same name.
		if Length(fn)
			if fn == "*"
				fPrompt = TRUE
				fn = ""
			elseif not Length(SplitPath(fn, _DRIVE_|_PATH_))
				PushBlock()
				cid = GotoBufferId(Get_Int(iDatabaseId))
				if MarkProjectSection(c_stAllProjects)
					if lFind(fn, "gli^")
						fn = GetProjectFullPathname(GetText(1, CurrLineLen()))
					endif
				endif
				GotoBufferId(cid)
				PopBlock()
			endif
		endif
	elseif NumFiles() == 0
		// if 0 files loaded, assume we're being loaded as an AutoLoadMacro,
		// and check if we should open a project.

		// check for a local project
		if Get_Int(iFLocalProjects)
			fn = ScanFor(CurrDir(), c_stLocalProject, fn)
		endif

		// check the autoload paths
		if not Length(fn)
			PushBlock()
			cid = GotoBufferId(Get_Int(iDatabaseId))
			if Get_Int(iFAutoLoad) and MarkProjectSection(c_stAutoLoad)
				// compare current directory to AutoLoad directories
				GotoBlockBegin()
				BegLine()
				repeat
					stPath = GetToken(GetText(1, 255), c_stDiv, 1)
					ExpandEnvVars(stPath)
					if Pos(Lower(AddTrailingSlash(stPath)), stCurrDir) == 1
						if lFind(c_stDiv, "gc")
							fn = GetText(CurrPos() + 1, 255)
							break
						endif
					endif
				until not Down() or not isCursorInBlock()
			endif
			GotoBufferId(cid)
			PopBlock()
		endif

		// if does not match an AutoLoad directory, open last project
		if not Length(fn)
			if Get_Int(iFOpenLast)
				fn = GetProfileStr(c_stIniSection, c_stIniLastProject, "")
			endif
		endif
	endif

	Set_Int(iFAutoSave, TRUE)
	if DosCmdLineOptionUsed("N")
		Set_Int(iFAutoSave, FALSE)
	endif

	// open project
	if Length(fn) or fPrompt or
			(Length(Trim(Query(DosCmdLine))) == 0 and Get_Int(iFPromptForProject))
		Set_Int(iFInStartup, TRUE)
		OpenProject(fn)
		Set_Int(iFInStartup, FALSE)

		#ifdef BUG_LoadStartupMacros
		//$ hack: work around fact that LoadStartupMacros seems to be wrapped
		// with Push/PopPosition, so that it does not stay in the buffer we
		// specify.
		g_idHack = GetBufferId()
		g_cHack = NumFiles()
		#endif

		#ifdef BUG_OnFirstEdit
		Hook(_ON_FIRST_EDIT_, OnFirstEdit)
		if not Length(Query(DosCmdLine))
			Set(DosCmdLine, QuotePath(GetProjectFullPathname(fn)))
		else
			g_fGotoNextFile = TRUE
			Set(DosCmdLine, QuotePath(GetProjectFullPathname(fn)) +
					iif(Length(Query(DosCmdLine)), " "+Query(DosCmdLine), ""))
		endif
		#endif
	endif

	Hook(_IDLE_, Idle_Initialize)
	Hook(_BEFORE_GETKEY_, Idle_Initialize)
	Hook(_IDLE_, Tooltip_Idle)
	Hook(_AFTER_COMMAND_, Tooltip_AfterCommand)

	// welcome message
	ShowVersion(TRUE)

	return()

Error:
	PurgeMacro(CurrMacroFilename())
end


proc Main()
	case Query(MacroCmdLine)
		when "-m"
			// show project menu
			DoProjectMenu()

		when "-Stop_Ensure"
			Stop_Ensure()
		when "-FreeTags"
			Tags_FreeAll()
		when "-RefreshFileList"
			RefreshFileList()

		otherwise
			// if first time run, handle first run; otherwise show help
			if not HandleFirstRun()
				DoHelpEx(c_stMainHelp)
			endif
	endcase
end


<PROJECT_MENU_KEY>						DoProjectMenu()
<HEADER_FILE_KEY>						OpenHeader(FALSE)
<HEADER_FILE_KEY2>						OpenHeader(TRUE)
<OPEN_FILE_AT_CURSOR_KEY>				OpenFileAtCursor()


