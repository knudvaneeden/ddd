// MASTER FILE: ["proj.si"]
//#pragma inhouse,chrisant



dll  "ProjDLL.dll"
	proc DLL_WhenPurged()

	// variables ----------------------------------------------------------
	integer proc Get_Int(integer iIntVar)
	string proc Get_Str(integer iIntVar)
	proc Set_Int(integer iStrVar, integer n)
	proc Set_Str(integer iStrVar, string st:cstrval)

	// flat file namespace ------------------------------------------------
	integer proc FlatFile_GetCount()
	integer proc FlatFile_CchLongestPath()
	string proc FlatFile_GetFilename(integer iIndex)

	integer proc FlatFile_Lookup(string pszFile:cstrval, string pszPath:cstrval,
								 integer iStart, integer ulFlags)

	integer proc FlatFile_FBuilding()
	integer proc FlatFile_FReload()
	proc FlatFile_Abort(integer fWait)
	proc FlatFile_Free()

	integer proc FlatFile_PrepareToBuild(string pszExts:cstrval)
	integer proc FlatFile_AddPath(string pszPath:cstrval, integer ulFlags)
	integer proc FlatFile_ThreadedBuild()
	integer proc FlatFile_CFound()

	integer proc FlatFile_PrepareToLoad()
	integer proc FlatFile_Load(string pszFile:cstrval, string pszPath:cstrval)

	// tags ---------------------------------------------------------------
//	integer proc Tags_CTags()
//	integer proc Tags_FReload()
	integer proc Tags_FLoaded()
	string proc Tags_CurrentTagFile()

	proc Tags_Abort(integer fWait, string pszTagFile:cstrval)
	integer proc Tags_Load(string pszTagFile:cstrval, integer fEnsure)

	string proc Tags_GetFirstTagFile()
	string proc Tags_GetNextTagFile()

	integer proc Tags_CchLongest()
	string proc Tags_GetSymbol(integer iIndex)
	string proc Tags_GetFilename(integer iIndex)
	integer proc Tags_GetLine(integer iIndex)
	string proc Tags_GetSearchLine(integer iIndex)
	integer proc Tags_GetType(integer iIndex)
	integer proc Tags_FAnchorToEnd(integer iIndex)
	string proc Tags_GetInfo(integer iIndex)

	integer proc Tags_Lookup(string pszTag:cstrval, integer iStart, integer ulFlags)

	proc Tags_FreeCurrent()
	proc Tags_FreeFile(string pszTagFile:cstrval)
	proc Tags_FreeAll()

	// BSC files ----------------------------------------------------------
	integer proc OpenBrowseFile(string pszBscFile:cstrval)
	integer proc CloseBrowseFile()

	proc DisposeDefinitions()
	proc DisposeReferences()
	proc DisposeArray()

	integer proc SetCurrentSymbol(string pszSymbol:cstrval)
	integer proc GetSymbol(integer i)

	string proc GetName(integer i, var integer typ, var integer atr)
	string proc GetType(integer typ)
	string proc GetAttr(integer atr)

	integer proc GetDefinitions(integer i)
	string proc GetDef(integer i, var integer line)

	integer proc GetReferences(integer i)
	string proc GetRef(integer i, var integer line)

	integer proc GetUses(integer i, integer mbf)
	integer proc GetUse(integer i)

	integer proc GetUbys(integer i, integer mbf)
	integer proc GetUby(integer i)

	integer proc GetBases(integer i)
	integer proc GetBase(integer i)

	integer proc GetDervs(integer i)
	integer proc GetDerv(integer i)

	integer proc GetMembers(integer i, integer mbf)
	integer proc GetMember(integer i)
end


constant iDatabaseId			= 1
constant iProjectId				= 2
constant iPathListId			= 3
constant iFListEnsured			= 4
constant iFNeedToEnsure			= 5
constant iFFirstRun				= 6
constant iCPrompts				= 7
constant iFDoingMenu			= 8
constant iFEverIdle				= 9
constant iFAutoLoad				= 10
constant iFOpenLast				= 11
constant iFPromptForProject		= 12
constant iFProjectTags			= 13
constant iFTimeoutHooked		= 14
constant iFAbandonEditor		= 15
constant iFInStartup			= 16
constant iFLocalProjects		= 17
constant iFIgnoreCase			= 18
constant iFAutoSave				= 19

constant iProjectFilename		= 101
constant iProjectTitle			= 102
constant iProjectExtensions		= 103
constant iTagsLocation			= 104
constant iProjDir				= 105
constant iTagFile				= 106
constant iBscFile				= 107


constant apSubDirs			= 0x00000001
constant apExclude			= 0x00000002


// ctags ------------------------------------------------------------------

constant lookFirst			= 0
constant lookPrev			= 1
constant lookNext			= 2
constant lookLast			= 3
constant lookExact			= 0x8000

constant symClass			= Asc('c')
constant symDefine			= Asc('d')
constant symEnumValue		= Asc('e')
constant symFunction		= Asc('f')
constant symEnum			= Asc('g')
constant symMember			= Asc('m')
constant symPrototype		= Asc('p')
constant symStruct			= Asc('s')
constant symTypedef			= Asc('t')
constant symUnion			= Asc('u')
constant symVariable		= Asc('v')

constant loadBadFormat		= -5
constant loadUnsorted		= -4
constant loadError			= -3
constant loadInProgress		= -2
constant loadNotFound		= -1


// BSC --------------------------------------------------------------------

#define mbfNil    0
#define mbfVars   1
#define mbfFuncs  2
#define mbfMacros 4
#define mbfTypes  8
#define mbfClass  16
#define mbfAll    1023



proc InsertFileList(integer fMark)
	integer i
	integer fResaved = FALSE

	if not fMark
		PushBlock()
	endif

	FlatFile_FReload()		// reset the reload indicator

ReSave:
	UnMarkBlock()
	Mark(_NONINCLUSIVE_)

	i = FlatFile_GetCount()
	while i
		i = i - 1
		InsertLine(FlatFile_GetFilename(i))
	endwhile
	if FlatFile_FReload() and not fResaved
		fResaved = TRUE
		KillBlock()
		goto ReSave
	endif

	Mark(_NONINCLUSIVE_)

	if not fMark
		UnMarkBlock()
		PopBlock()
	endif
end


