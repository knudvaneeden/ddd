/****************************************************************************\

    Windows registry api

    Comments

    The functions and constants defined below are documented in the
    Win32-SDK. The definitions are not complete. They encompass only
    what is currently needed.

    The lpData arguments of RegQueryValueExA and RegSetValueExA actually
    are VOID*. As defined below they work fine for string arguments
    (REG_SZ and REG_EXPAND_SZ). When used for other data types, the data
    must be passed through SAL strings.

    lpftLastWriteTime arguments actually are of type PFILETIME, e.g.,
    the string argument must be at least of size 8 (two DWORD's). If the
    string is too small TSE might (will?) crash.

    Version         v2.00/19.04.99
    Copyright       (c) 1997-99 by DiK

    History
    v2.00/19.04.99  new for version 2.0

\****************************************************************************/

/****************************************************************************\
    constants
\****************************************************************************/

constant
    ERROR_SUCCESS           = 0,

    HKEY_CLASSES_ROOT       = 0x80000000,
    HKEY_CURRENT_USER       = 0x80000001,
    HKEY_LOCAL_MACHINE      = 0x80000002,
    HKEY_USERS              = 0x80000003,
    HKEY_PERFORMANCE_DATA   = 0x80000004,
    HKEY_CURRENT_CONFIG     = 0x80000005,
    HKEY_DYN_DATA           = 0x80000006,

    REG_SZ                          = 1,
    REG_EXPAND_SZ                   = 2,
    REG_BINARY                      = 3,
    REG_DWORD                       = 4,
    REG_DWORD_LITTLE_ENDIAN         = 4,
    REG_DWORD_BIG_ENDIAN            = 5,
    REG_LINK                        = 6,
    REG_MULTI_SZ                    = 7,
    REG_RESOURCE_LIST               = 8,
    REG_FULL_RESOURCE_DESCRIPTOR    = 9,
    REG_RESOURCE_REQUIREMENTS_LIST  = 10,

    REG_OPTION_RESERVED         = 0x00000000,
    REG_OPTION_NON_VOLATILE     = 0x00000000,
    REG_OPTION_VOLATILE         = 0x00000001,
    REG_OPTION_CREATE_LINK      = 0x00000002,
    REG_OPTION_BACKUP_RESTORE   = 0x00000004,

    SYNCHRONIZE             = 0x00100000,
    READ_CONTROL            = 0x00020000,
    STANDARD_RIGHTS_READ    = READ_CONTROL,
    STANDARD_RIGHTS_WRITE   = READ_CONTROL,
    STANDARD_RIGHTS_ALL     = 0x001F0000,

    KEY_QUERY_VALUE         = 0x0001,
    KEY_SET_VALUE           = 0x0002,
    KEY_CREATE_SUB_KEY      = 0x0004,
    KEY_ENUMERATE_SUB_KEYS  = 0x0008,
    KEY_NOTIFY              = 0x0010,
    KEY_CREATE_LINK         = 0x0020,

    KEY_READ    = (STANDARD_RIGHTS_READ |
                    KEY_QUERY_VALUE | KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY)
                    & ~SYNCHRONIZE,

    KEY_WRITE   = (STANDARD_RIGHTS_WRITE |
                    KEY_SET_VALUE | KEY_CREATE_SUB_KEY)
                    & ~SYNCHRONIZE,

    KEY_EXECUTE =  KEY_READ
                    & ~SYNCHRONIZE,

    KEY_ALL_ACCESS  = (STANDARD_RIGHTS_ALL |
                    KEY_QUERY_VALUE | KEY_SET_VALUE | KEY_CREATE_SUB_KEY |
                    KEY_ENUMERATE_SUB_KEYS | KEY_NOTIFY | KEY_CREATE_LINK)
                    & ~SYNCHRONIZE

/****************************************************************************\
    functions
\****************************************************************************/

dll "<advapi32.dll>"
    integer proc RegCloseKey(
        integer hKey)

    integer proc RegDeleteKeyA(
        integer hKey,
        string lpSubKey: CStrVal)

    integer proc RegOpenKeyExA(
        integer hKey,
        string lpSubKey: CStrVal,
        integer ulOptions,
        integer samDesired,
        var integer phkResult)

    integer proc RegCreateKeyExA(
        integer hKey,
        string lpSubKey: CStrVal,
        integer Reserved,
        string lpClass: CStrVal,
        integer dwOptions,
        integer samDesired,
        integer lpSecurityAttributes,
        var integer phkResult,
        var integer lpdwDisposition)

    integer proc RegQueryValueExA(
        integer hKey,
        string lpValueName: CStrVal,
        integer lpReserved,
        var integer lpType,
        string lpData: StrPtr,
        var integer lpcbData)

    integer proc RegSetValueExA(
        integer hKey,
        string lpValueName: CStrVal,
        integer lpReserved,
        integer dwType,
        string lpData: CStrVal,
        integer cbData)

    integer proc RegEnumKeyExA(
        integer hKey,
        integer dwIndex,
        string lpName: StrPtr,
        var integer lpcbName,
        integer lpReserved,
        string lpClass: StrPtr,
        var integer lpcbClass,
        string lpftLastWriteTime: StrPtr)

    integer proc RegQueryInfoKeyA(
        integer hKey,
        string lpClass: StrPtr,
        var integer lpcbClass,
        integer lpReserved,
        var integer lpcSubKeys,
        var integer lpcbMaxSubKeyLen,
        var integer lpcbMaxClassLen,
        var integer lpcValues,
        var integer lpcbMaxValueNameLen,
        var integer lpcbMaxValueLen,
        var integer lpcbSecurityDescriptor,
        string lpftLastWriteTime: StrPtr)
end
