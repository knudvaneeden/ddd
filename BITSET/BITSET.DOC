                          CRAZY JACK'S BIT SET SUPPORT

     (c)Copyright 1993 by Jack Hazlehurst
     First version - 07/01/93

     This file contains NO page breaks.  To get a  printed  copy,  use  your
     favorite file printer, or, better, suck it in to TSE and print it.

     No, gang, if you're looking for things to set, clear and test bits in a
     bit set you'll have to look in  the  STRSTUFF  files.   THESE  routines
     provide   additional  support  for  the  TSE  bit  sets  "VarTabs"  and
     "WordSet".  "Why?" you ask?  I have no idea; it Just Happened That Way.
     It's a Feature.  |-)

     There are four routines in the binary which you call directly from your
     macros:

     WrdSet2WrdChrs(), which converts the  TSE  "WordSet"  bit  set  into  a
     character string that can be viewed and/or edited.

     WrdChrs2WrdSet(), which converts a character string set up according to
     the TSE rules into a bit set which can be stored in "WordSet".

     TabSet2TabPosns(), which converts the TSE  "VarTabs"  bit  set  into  a
     character string that can be viewed and/or edited.

     TabPosns2TabSet(),  which  converts a character string set up according
     to the TSE rules into a bit set which can be stored in "VarTabs".

     TSE doesn't actually contain ChrSet() and TabSet(), which  convert  the
     appropriate  character  strings  into bit sets.  They exist only in the
     SAL Compiler, which is why they only accept constant strings.  To  make
     it  possible  to  alter  "WordSet"  and  "VarTabs"  dynamically, I have
     written these routines.

     I originally wrote them in SAL, but on my old beater  XT  they  took  a
     noticeable  amount  of  time to execute.  The binary versions presented
     here are so fast that, even on my 8mHz XT they seem instantaneous.

     To access the binaries you use the following declaration:

   binary ["bitset.bin"]
       integer proc WrdChrs2WrdSet( string LetterSet, var string Result ): 0
       integer proc TabSet2TabPosns( string VTabSet, var string TabStr ) : 3
       integer proc TabPosns2TabSet( string TabStr, var string VTabSet ) : 6
       integer proc WrdSet2WrdChrs( string BitSet, var string Result )   : 9
   end

     The calls to the routines all have the same form:

          <proc name>( <source string>, <destination string>)

     Note  that  the  destination string is a var string as this is the only
     way we can pass a string back from a binary in SAL.

     WrdSet2WrdChrs() and TabSet2TabPosns() expect a destination string long
     enough to take the results of the conversion of the bit set to an ASCII
     string.  Anything in the destination string  at  entry  is  lost.   The
     result  string  becomes however long it needs to be.  If the string you
     provide has a maximum  length  that  is  too  short  to  take  all  the
     resulting  characters,  these  routines  return  FALSE,  otherwise they
     return TRUE.

     WrdChrs2WrdSet() and TabPosns2TabSet() expect a destination  string  at
     least  32 bits long.  If the destination string is not EXACTLY 32 bytes
     long it is forced to be 32 bytes long and all its bits are  cleared  to
     zero.   If  the  length  is  32  bytes, it is left untouched.  The bits
     resulting from the conversion are then added to whatever is already  in
     the  string  (ORed  into it).  If the maximum length of the destination
     field is less than 32 so  that  we  can't  create  a  proper  set,  the
     routines return FALSE, otherwide they return TRUE.

     For WrdChrs2WrdSet(), the source string must contain a character string
     that is built according the the TSE ChrSet() rules.   The  output  from
     WrdSet2WrdChrs() can be used as input to WrdChrs2WrdSet().

     For TabPosns2TabSet(), a list of tab positions in decimal notation must
     me provided.  Each tab position is from 1 to three characters long with
     a  maximum  value  of 255.  If the value is greater than 255 the reults
     may be kind of funny.  The tab positions must be separated  by  spaces.
     This  is  the  same  as  the  rules  for  TabSet().   The  output  from
     TabSet2TabPosns() is suitable as input to TabPosns2TabSet().

     As examples, here are a couple of routines I have cut  out  of  my  TSE
     burn-in  file  which  I  use  for  editing  and  changing "VarTabs" and
     "WordSet":

     //
     // This next macro allows the user to change the "WordSet" characters
     //
     proc NewWordSet()
         string s[78] = "", t[32] = ""

         WrdSet2WrdChrs( Query( WordSet ), s )
         if Ask( "Enter WordSet characters:", s )
             WrdChrs2WrdSet( s, t )
             Set( WordSet, t )
         endif

     end
     //
     // This macro allows the user to change the "variable" tabs
     //
     proc NewVarTabs()
         string s[78] = "", t[32] = ""

         TabSet2TabPosns( Query( VarTabs ), s )
         if Ask( "Enter variable tab positions:", s )
             TabPosns2TabSet( s, t )
             Set( VarTabs, t )
         endif

     end

     You  can  just  clip  the  declaration  and  these routines out of this
     writeup and drop them into YOUR TSE burn-in file.

                            *** END OF BITSET.DOC ***
